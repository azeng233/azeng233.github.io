<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022年4月总结</title>
      <link href="/posts/dcf3105f/"/>
      <url>/posts/dcf3105f/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 简单总结一下2022年4月份的历程！</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>时间过得真快，从开学到现在不知不觉就已经过了两个多月了，考研倒计时还剩下232天，距离分手也过去了快两个月，最近释怀了。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在简单的记录一下自己的近期学习路线：</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>最近已经把汤家凤基础部分过了一遍，正在二刷1800，发现之前有很多不是很理解的东西，现在通过反复的做题可以慢慢弄懂了，线性代数也慢慢在走向正轨。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>从三月底到现在开始慢慢的在做英语考研真题，大概每一篇阅读现在都能稳定在错两个以内，单词从去年九月份到现在已经记完两遍了，现在在开始第三遍，现在开始每天复习，每天保证记100个单词，复习的可能到了后期就一天四五百了。</p><p><img src="https://cdn.zengchen233.cn/img/20220506.PNG" alt="20220506" loading="lazy"></p><h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>还没开始🕊️🕊️🕊️</p><h3 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h3><p>现在只开始了数据结构，等找个机会再来更新吧！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的状况！</title>
      <link href="/posts/25a5e74c/"/>
      <url>/posts/25a5e74c/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 简单记录一下最近的状况！</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="初"><a href="#初" class="headerlink" title="初"></a>初</h2><p>从3月19号到现在经历了很多事情，那天晚上分手了，分开的很平静，没有预想的那种撕心裂肺，但是听到分手的消息的时候还是在体育馆哭了起来，初恋真的很美好，但是事情都已经过去了，不要在找她了，就安静的躺在列表里当一个最熟悉的陌生人吧！</p><p>不要在相爱时找不爱的细节，也别在分开时回忆相爱的点滴，两个人好的时候,就好比一起乘坐一辆火车,奔着同一个目的地，沿途一起看风景，分手时就好比中途他要下车，因为我们要去的，很可能不是一个地方了，我拦着你说不许走，或说我也在这儿下,可是你忘了你原本要去的地方吗。放行是美德，不管是谁放了谁。一直以来人们对于分手有个误区，好像分手这种事情，往往被分手的那一方，容易被人注意到他们要更加难过，我更愿意相信，分手后两边都在承受痛苦，说过的话，拍过的照，什么天涯，什么海角，所有的甜蜜凭证化为枪口。一起吃过的小店，走过的天桥，所有的稀疏平常在分手以后却变得分外耀眼。    </p><p>彼此对彼此接下来的生活都不要妄加干涉、评论、猜忌，我觉得这是对分手后俩人的曾经一种保护，断联是最好的办法，最美的那些时刻，星辰，日落，我就记住了。   </p><p>从现在开始，你要每天认真洗脸，好好护肤，按时睡觉 不要在深夜发那些矫情的话，第二天早上起来的时候再删掉，更不要再去联系那个早就已经走散在你生活里的人了   </p><p>你还要多读书，多认识一些可爱的人，不要把自己的圈子局限在某个人身上。除此之外，你还要努力变得温柔和大度，无论别人如何变化，你都要不忘初心，保持善意。   </p><p>同时，我还希望你要明白，真正的成熟应该是不再逢人就诉说自己的遭遇，是逐渐学会一个 人面对生活里的苦， 自己说服自己，想通曾经所有想不通的事情。所以，你看，这样的你，就算现在单身也无所谓啊，因为你这么努力的去做好自己，那你当然也会遇到那个跟你一样热爱生活、频率相同的人。等到某一天他出现的时候，你就会恍然大悟，你付出的所有等待都是有意义的，不是吗？   </p><p>答应我，一定要快乐哦，就像你不曾认识她的时候那样！</p><h2 id="中"><a href="#中" class="headerlink" title="中"></a>中</h2><p>几天前，突然翻相册翻到了倩倩送给思思的圣诞节祝福信：</p><p><img src="https://cdn.zengchen233.cn/img/%E5%80%A9%E5%80%A9%E7%BB%99%E6%80%9D%E6%80%9D%E7%9A%84%E7%A5%9D%E7%A6%8F%E4%BF%A1.jpg!/rotate/270" alt="倩倩给思思的祝福信" loading="lazy"></p><p>看到了<code>斯人若彩虹，遇上方知有</code>这句话，真的是很有意境！于是抽空看完了<code>怦然心动</code>这部电影，真的太治愈了，真正相爱的两个人是不会走散的，或许过程真的很曲折，但是你要知道，老天会让一个一个人陪你走完一段路，他们最终会走开，但是你要坚信自己肯定可以找到人生的<code>彩虹</code>！</p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(1).jpg" alt="怦然心动 (1)" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(2).jpg" alt="怦然心动 (2)" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(3).jpg" alt="怦然心动 (3)" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(4).jpg" alt="怦然心动 (4)" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(5).jpg" alt="怦然心动 (5)" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(6).jpg" alt="怦然心动 (6)" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(7).jpg" alt="怦然心动 (7)" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(8).jpg" alt="怦然心动 (8)" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%20(9).jpg" alt="怦然心动 (9)" loading="lazy"></p><hr><p><em>Some of us get dipped in flat, some in satin, some in gloss. But every once in a while you find someone whos iridescent, and when you do, nothing will ever compare。</em></p><p><em><u>有人住高楼，有人处深沟，有人光万丈，有人一身锈，世人万千种，浮云莫去求，斯人若彩虹，遇上方知有。</u></em></p><p>这句话真的是我最喜欢最喜欢的一句话了！</p><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2><p>前天知道了自己是没有机会复合，还是干脆点退出她的舞台吧！不要再去找他了，真的蛮掉底子，始于喜欢，终于喜欢，喜欢她就不要再去打扰她啦！期待下一次相遇还能相互对视笑一下吧！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变积分限函数</title>
      <link href="/posts/88722e0b/"/>
      <url>/posts/88722e0b/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 今天在做定积分习题的时候发现有一个位置不是很懂，于是我在网山搜索的时候发现了一篇有如神助的文章，特用自己的白话翻译翻译，记录一下。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="积分上限函数"><a href="#积分上限函数" class="headerlink" title="积分上限函数"></a>积分上限函数</h2><p>积分上限函数又称变上限积分,例如$\int_{a}^{x}f(t)dt$,其中上限为某一变量$x$,下限为某一常量$a$,假定$f(t)$的原函数为$F(t)$,则上述变上限积分就等于$F(x)-F(a)$,该积分显然是$x$的函数,其中$F(a)$为常数.现在对变上限积分求导就是对$F(x)-F(a)$求导,很明显等于$f(x)$。</p><p>更一般的情形,如果积分上限为$x$的某一函数$g(x)$,则变上限积分就等于$F[g(x)]-F(a)$,对其求导就得到$f[g(x)]g’(x)$。</p><p>$$\phi (x)&#x3D;\int_{a}^{x}f(x)dx&#x3D;\int_{a}^{x}f(t)dt$$</p><p><strong>注意：</strong></p><p>这是一个函数，自变量是积分上限的那个$x$,与积分变量选取的是$x$或者是$t$或者是其他的字母没有半毛钱的关系，比如：</p><p>$$\phi (x)&#x3D;\int_{0}^{x}t^{2}dt&#x3D;\frac{t^{3}}{3}|_{0}^{x}&#x3D;\frac{x^{3}}{3}$$</p><h2 id="积分上限函数的几何意义"><a href="#积分上限函数的几何意义" class="headerlink" title="积分上限函数的几何意义"></a>积分上限函数的几何意义</h2><p>定积分的几何意义是计算曲边梯形的面积，而积分上限函数表示的是右边线可以在$[a,b]$上变动的曲边梯形的面积函数。</p><p><img src="https://cdn.zengchen233.cn/img/image-20220303203945542.png" alt="image-20220303203945542" loading="lazy"></p><h2 id="积分上限函数求导"><a href="#积分上限函数求导" class="headerlink" title="积分上限函数求导"></a>积分上限函数求导</h2><p>$$\phi (x)&#x3D;[\int_{a}^{x}f(t)dt]’&#x3D;f(x)$$</p><p>例如：</p><p>$$[\int_{0}^{x}t^{2}dt]’&#x3D;(\frac{x^{3}}{3})’&#x3D;x^2$$</p><p>如果积分上限函数是复合函数形式则：</p><p>$$\phi (\varphi (x))&#x3D;[\int_{a}^{\varphi (x)}f(t)dt]’&#x3D;f(\varphi (x))\varphi ‘(x)$$</p><p>例如：</p><p>$$(\int_{0}^{x^2}t^2dt)’&#x3D;(\frac{x^6}{3})’&#x3D;2x^5&#x3D;(x^2)^2\cdot (x^2)’$$</p><h2 id="求下列函数的导数"><a href="#求下列函数的导数" class="headerlink" title="求下列函数的导数"></a>求下列函数的导数</h2><p>① $\int_{0}^{x}e^{-t^2}dt$</p><p><strong>解：</strong></p><p>$$(\int_{0}^{x}e^{-t^2}dt)’&#x3D;e^{-x^2}$$</p><p>② $\int_{0}^{\sqrt{x}}\sin t^2dt$</p><p><strong>解：</strong></p><p>$$(\int_{0}^{\sqrt{x}}\sin t^2dt)’&#x3D;\sin (\sqrt{x})^2\cdot (\sqrt{x})’&#x3D;\frac{\sin x}{2\sqrt{x}}$$</p><p>③ $\int_{x^{2}}^{e^{x}} \ln x d x$.</p><p><strong>解：</strong></p><p>$$ \left(\int_{x^{2}}^{e^{x}} \ln x d x\right)^{\prime}$$</p><p>$$&#x3D;\left(\int_{x^{2}}^{0} \ln x d x+\int_{0}^{e^{x}} \ln x d x\right)^{\prime}$$</p><p>$$&#x3D;\left(-\int_{0}^{x^{2}} \ln x d x+\int_{0}^{e^{x}} \ln x d x\right)^{\prime}$$</p><p>$$&#x3D;-\ln x^{2} \cdot\left(x^{2}\right)^{\prime}+\ln e^{x} \cdot\left(e^{x}\right)^{\prime}$$</p><p>$$&#x3D;-2 x \ln x^{2}+x e^{x} $$</p><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2><p>文章写到这里就算完结了，等到下次在有不懂的位置在更新吧，谢谢大家观看到这里！👍👍👍</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker迁移</title>
      <link href="/posts/a0bbb6b2/"/>
      <url>/posts/a0bbb6b2/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 前几天把电脑重装了系统，更新到了Win11，安装Docker后发现很占C盘空间，于是便想着把Docker迁移到其他盘，并且迁移一下镜像。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="Docker-Desktop迁移"><a href="#Docker-Desktop迁移" class="headerlink" title="Docker Desktop迁移"></a>Docker Desktop迁移</h2><p>经过多方查询得知Docker可以通过软链接安装到其他盘。具体操作如下：</p><p>首先我们先退出Docker Desktop，</p><p><img src="https://cdn.zengchen233.cn/img/image-20220227104908621.png" alt="image-20220227104908621" loading="lazy"></p><p>然后卸载掉Docker Desktop，紧接着把<code>C:\Program Files\Docker</code>下面的文件夹全部清除掉，就可以执行以下命令了。</p><p>在命令提示符执行下边的命令（注意：需要管理员身份运行命令提示符）</p><pre class="language-shell" data-language="shell"><code class="language-shell">mklink &#x2F;j &quot;C:\Program Files\Docker&quot; &quot;F:\Docker&quot;</code></pre><p>最后重装Docker Desktop，可以发现Docker Desktop已经安装到了F盘。</p><p><img src="https://cdn.zengchen233.cn/img/image-20220227105206932.png" alt="image-20220227105206932" loading="lazy"></p><h2 id="Images迁移"><a href="#Images迁移" class="headerlink" title="Images迁移"></a>Images迁移</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>打开Docker Desktop，关闭<code>Use the WSL 2 based engine</code>,这个时候在<code>Resources</code>选项下面就会出现<code>Advance</code>选项，但是我的电脑关闭了这个选项就无法重启Docker了，于是乎这种办法暂时搁浅，等以后用别人的电脑可以了再来更新。</p><p><img src="https://cdn.zengchen233.cn/img/image-20220227105320676.png" alt="image-20220227105320676" loading="lazy"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>执行<code>docker info</code>可以看出Docker root路径在<code>/var/lib/docker</code>，</p><p><img src="https://cdn.zengchen233.cn/img/image-20220227105637311.png" alt="image-20220227105637311" loading="lazy"></p><p>步骤：</p><pre class="language-shell" data-language="shell"><code class="language-shell">1.首先退出Docker Desktop。</code></pre><p><img src="https://cdn.zengchen233.cn/img/image-20220227104908621.png" alt="image-20220227104908621" loading="lazy"></p><pre class="language-shell" data-language="shell"><code class="language-shell">2.wsl --shutdown</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">3.将&#96;docker-desktop-data&#96;导出到&#96;F:\docker-desktop-data.tar&#96;（注意，原有的docker images不会一起导出）wsl --export docker-desktop-data F:\docker-desktop-data.tar</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">4.注销docker-desktop-data：wsl --unregister docker-desktop-data</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">5.重新导入docker-desktop-data到要存放的文件夹：F:\Docker\wsl\wsl --import docker-desktop-data F:\Docker\wsl\  F:\docker-desktop-data.tar --version 2</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">6.然后重启Docker Desktop就可以愉快的使用啦！</code></pre><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>Win11更新具体教程等下次找个空闲时间写下来。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云函数计算&amp;校趣多疫情打卡</title>
      <link href="/posts/ec51d430/"/>
      <url>/posts/ec51d430/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 本文转载自<a href="https://battlehawk233.cn/post/64.html">While True: learn()</a>,然后自己做了一部分小修改(增加了邮件提醒功能)。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="配置函数调用"><a href="#配置函数调用" class="headerlink" title="配置函数调用"></a>配置函数调用</h2><p>首先登陆<code>阿里云</code>，找到<code>控制台</code>-<code>函数计算FC</code>-<code>创建服务</code>，进入之后选择创建函数：</p><p><img src="https://cdn.zengchen233.cn/img/202202021610898.png" alt="image-20220202161050787" loading="lazy"></p><p>然后配置基本设置：</p><p><img src="https://cdn.zengchen233.cn/img/202202021613075.png" alt="image-20220202161319990" loading="lazy"></p><h2 id="编写-amp-上传代码"><a href="#编写-amp-上传代码" class="headerlink" title="编写&amp;上传代码"></a>编写&amp;上传代码</h2><p>原作者写的打卡脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> logging<span class="token keyword">import</span> datetime<span class="token keyword">import</span> json<span class="token keyword">import</span> os<span class="token keyword">import</span> requests <span class="token comment"># Made by BATTLEHAWK</span><span class="token comment"># https://battlehawk233.cn/</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">r"https://mps.zocedu.com/corona/submitHealthCheck/submit"</span>url_info <span class="token operator">=</span> <span class="token string">r"https://mps.zocedu.com/corona/submitHealthCheck/getCurrentInfo"</span>defaultjson <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"checkPlace"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"contactMethod"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"teacher"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"temperature"</span><span class="token punctuation">:</span> <span class="token string">"36.5"</span><span class="token punctuation">,</span>        <span class="token string">"isCohabitFever"</span><span class="token punctuation">:</span> <span class="token string">"否"</span><span class="token punctuation">,</span>        <span class="token string">"isLeavePalce"</span><span class="token punctuation">:</span> <span class="token string">"否"</span><span class="token punctuation">,</span>        <span class="token string">"beenPlace"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"isContactNcov"</span><span class="token punctuation">:</span> <span class="token string">"否"</span><span class="token punctuation">,</span>        <span class="token string">"livingPlace"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"livingPlaceDetail"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"name1"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"relation1"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"phone1"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"name2"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"relation2"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"phone2"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"remark"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"extraInfo"</span><span class="token punctuation">:</span> <span class="token string">"[]"</span><span class="token punctuation">,</span>        <span class="token string">"healthStatus"</span><span class="token punctuation">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span>        <span class="token string">"emergencyContactMethod"</span><span class="token punctuation">:</span> <span class="token string">"[]"</span><span class="token punctuation">,</span>        <span class="token string">"checkPlacePoint"</span><span class="token punctuation">:</span> <span class="token string">"124,37"</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceDetail"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceCountry"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceProvince"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceCity"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceArea"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"other"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"openid"</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>openid <span class="token operator">=</span> <span class="token string">""</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 MicroMessenger/7.0.9.501 NetType/WIFI MiniProgramEnv/Windows WindowsWechat"</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>jsonfile <span class="token operator">=</span> <span class="token string">"config.json"</span> <span class="token keyword">def</span> <span class="token function">getSessionID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://mps.zocedu.com/corona/submitHealthCheck"</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string">"openId"</span><span class="token punctuation">:</span> openid<span class="token punctuation">,</span>        <span class="token string">"latitude"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"longitude"</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    sessionid <span class="token operator">=</span> res<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sessionid  <span class="token comment"># 加载Json配置文件</span><span class="token keyword">def</span> <span class="token function">loadJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> data<span class="token punctuation">,</span> openid    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>jsonfile<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span>    openid <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">"other"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"openid"</span><span class="token punctuation">]</span>  <span class="token comment"># 打卡函数</span><span class="token keyword">def</span> <span class="token function">checkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"JSESSIONID"</span><span class="token punctuation">:</span> getSessionID<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"校趣多打卡成功！当前时间："</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"校趣多打卡失败！请检查配置文件是否填写正确！"</span><span class="token punctuation">)</span>  <span class="token comment"># 创建配置文件</span><span class="token keyword">def</span> <span class="token function">createConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> defaultjson    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>jsonfile<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>defaultjson<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>jsonfile<span class="token punctuation">)</span><span class="token punctuation">:</span>        createConfigFile<span class="token punctuation">(</span><span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"未检测到配置文件，请填写config.json后运行本打卡脚本!"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        loadJson<span class="token punctuation">(</span><span class="token punctuation">)</span>        checkIn<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> 详细说明：</p><ul><li>打卡点 checkPlace 格式：XX省-XX市-XX区</li><li>联系方式 contactMethod 格式：电话号码</li><li>居住地 livingPlace 格式：XX省-XX市-XX区</li><li>详细住址 livingPlaceDetail</li><li>打卡省份 checkPlaceProvince</li><li>打卡城市 checkPlaceCity</li><li>打卡县市区 checkPlaceArea</li></ul><p>以上这些是必须要填写的，另外还有一个不能忽视：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"other"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"openid"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span></code></pre><p>这里是一定不能忘记的，要不然就会一直报错，这里需要用到抓包工具，我推荐一个抓包工具：<a href="https://www.telerik.com/fiddler/fiddler-everywhere">Fiddler</a>。</p><h2 id="获取openid"><a href="#获取openid" class="headerlink" title="获取openid"></a>获取openid</h2><p>首先需要在电脑上登陆微信，找到校趣多的小程序：</p><p><img src="https://cdn.zengchen233.cn/img/202202021812542.png" alt="image-20220202181253494" loading="lazy"></p><p>用电脑打卡一次，去找到路径：</p><p><img src="https://cdn.zengchen233.cn/img/202202021815541.png" alt="image-20220202181541444" loading="lazy"></p><p>获取到自己openid以后就填写到代码当中去，这里最好先手动生成一下<code>config.json</code>,因为阿里云FC那个里面不知道是怎么回事，无法通过代码自动生成<code>config.json</code>。</p><h2 id="设置定时触发"><a href="#设置定时触发" class="headerlink" title="设置定时触发"></a>设置定时触发</h2><p><img src="https://cdn.zengchen233.cn/img/202202031159454.png" alt="image-20220203115927372" loading="lazy"></p><p>这里可以设置定时触发器，我设置的是上海时间每天早上六点自动打卡：<code>CRON_TZ=Asia/Shanghai 0 0 6 * * *</code>。</p><h2 id="修改版本"><a href="#修改版本" class="headerlink" title="修改版本"></a>修改版本</h2><p>这里对原先的代码进行了一些修改，增添了以下功能：</p><ul><li><input checked="" disabled="" type="checkbox"> 邮件发送</li></ul><p>代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> logging<span class="token keyword">import</span> datetime<span class="token keyword">import</span> json<span class="token keyword">import</span> os<span class="token keyword">import</span> pytz<span class="token keyword">import</span> smtplib<span class="token keyword">import</span> requests<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Headerlogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 邮箱参数</span>sender <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 发送邮箱</span>pwd <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 邮箱smtp密码</span>server_host <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># smtp地址</span>receiver <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 接收者</span><span class="token comment"># post地址</span>url <span class="token operator">=</span> <span class="token string">r"https://mps.zocedu.com/corona/submitHealthCheck/submit"</span>url_info <span class="token operator">=</span> <span class="token string">r"https://mps.zocedu.com/corona/submitHealthCheck/getCurrentInfo"</span><span class="token comment"># 生成json文件</span>defaultjson <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"checkPlace"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"contactMethod"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"teacher"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"temperature"</span><span class="token punctuation">:</span> <span class="token string">"36.2"</span><span class="token punctuation">,</span>        <span class="token string">"isCohabitFever"</span><span class="token punctuation">:</span> <span class="token string">"否"</span><span class="token punctuation">,</span>        <span class="token string">"isLeavePalce"</span><span class="token punctuation">:</span> <span class="token string">"否"</span><span class="token punctuation">,</span>        <span class="token string">"beenPlace"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"isContactNcov"</span><span class="token punctuation">:</span> <span class="token string">"否"</span><span class="token punctuation">,</span>        <span class="token string">"livingPlace"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"livingPlaceDetail"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"name1"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"relation1"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"phone1"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"name2"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"relation2"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"phone2"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"remark"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"extraInfo"</span><span class="token punctuation">:</span> <span class="token string">"[]"</span><span class="token punctuation">,</span>        <span class="token string">"healthStatus"</span><span class="token punctuation">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span>        <span class="token string">"emergencyContactMethod"</span><span class="token punctuation">:</span> <span class="token string">"[]"</span><span class="token punctuation">,</span>        <span class="token string">"checkPlacePoint"</span><span class="token punctuation">:</span> <span class="token string">"124,37"</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceDetail"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceCountry"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceProvince"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceCity"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"checkPlaceArea"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"other"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"openid"</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>openid <span class="token operator">=</span> <span class="token string">""</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 MicroMessenger/7.0.9.501 NetType/WIFI MiniProgramEnv/Windows WindowsWechat"</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>jsonfile <span class="token operator">=</span> <span class="token string">"config.json"</span><span class="token comment"># 获取JSESSIONID</span><span class="token keyword">def</span> <span class="token function">getSessionID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://mps.zocedu.com/corona/submitHealthCheck"</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string">"openId"</span><span class="token punctuation">:</span> openid<span class="token punctuation">,</span>        <span class="token string">"latitude"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"longitude"</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    sessionid <span class="token operator">=</span> res<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sessionid<span class="token comment"># 加载Json配置文件</span><span class="token keyword">def</span> <span class="token function">loadJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> data<span class="token punctuation">,</span> openid    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>jsonfile<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span>    openid <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">"other"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"openid"</span><span class="token punctuation">]</span><span class="token comment"># 打卡函数</span><span class="token keyword">def</span> <span class="token function">checkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"JSESSIONID"</span><span class="token punctuation">:</span> getSessionID<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"校趣多打卡成功！当前时间："</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">'PRC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        send_email<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"校趣多打卡失败！请检查配置文件是否填写正确！"</span><span class="token punctuation">)</span>        send_error_email<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建配置文件</span><span class="token keyword">def</span> <span class="token function">createConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> defaultjson    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>jsonfile<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>defaultjson<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> server    <span class="token comment"># 邮件内容</span>    subject <span class="token operator">=</span> <span class="token string">'健康打卡已经完成！'</span>    time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">'PRC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> <span class="token string">'当前时间为：'</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">'，当天健康打卡已经完成！'</span>    message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sender    <span class="token comment"># 发送</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        server <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>server_host<span class="token punctuation">)</span>        server<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server_host<span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>        server<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>        server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"邮件发送成功"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: 无法发送邮件"</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_error_email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> server    <span class="token comment"># 邮件内容</span>    subject <span class="token operator">=</span> <span class="token string">'好像出错啦！'</span>    time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">'PRC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> <span class="token string">'当前时间为：'</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">'，当天未完成健康打卡，请手动打卡，错误信息见控制台。'</span>    message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sender    <span class="token comment"># 发送</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        server <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>server_host<span class="token punctuation">)</span>        server<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server_host<span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>        server<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>        server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"邮件发送成功"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: 无法发送邮件"</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>jsonfile<span class="token punctuation">)</span><span class="token punctuation">:</span>        createConfigFile<span class="token punctuation">(</span><span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"未检测到配置文件，请填写config.json后运行本打卡脚本!"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        loadJson<span class="token punctuation">(</span><span class="token punctuation">)</span>        checkIn<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h2><p><img src="https://cdn.zengchen233.cn/img/202202021829414.png" alt="image-20220202182901321" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/202202021829832.png" alt="image-20220202182916790" loading="lazy"></p><hr><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2><p>我把代码放<code>Github</code>上了，欢迎大家<code>fork</code>和<code>pr</code>，谢谢大家观看！</p><p><a href="https://github.com/azeng233/xiaoquduo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=azeng233&repo=xiaoquduo&show_owner=1" alt="Readme Card" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022新春快乐呀</title>
      <link href="/posts/51e50410/"/>
      <url>/posts/51e50410/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 祝大家新年快乐呀！</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>新年的钟声很快就要敲响了，马上就要迎来虎年，不知道大家现在有没有吃年夜饭呀！嘿嘿我已经吃完了，我家的年夜饭种类可多了，不说了我已经形容不过来了，直接上图吧！</p><p><img src="https://cdn.zengchen233.cn/img/202201312001817.JPG" alt="IMG_7433" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/202201312002537.JPG" alt="IMG_7431" loading="lazy"></p><hr><p>这是思思家里的年夜饭的饭菜！</p><p><img src="https://cdn.zengchen233.cn/img/202201312003496.png" alt="D356D5B45658246CAFBA8AA325420BD4" loading="lazy"></p><hr><p>在这里祝大家新年快乐呀，身体健康万事如意，新的一年里每天开开心心的就好，不要让讨人厌的人扰乱你的心情！</p><p>再放两张可爱的老虎图片吧！</p><p><img src="https://cdn.zengchen233.cn/img/202201312004930.PNG" alt="IMG_7418" loading="lazy"></p><hr><p><img src="https://cdn.zengchen233.cn/img/202201312005715.PNG" alt="IMG_7419" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客使用CDN加速</title>
      <link href="/posts/2595fb3b/"/>
      <url>/posts/2595fb3b/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 博客打开的时候还是挺快的，但是开了<a href="http://busuanzi.ibruce.info/">不蒜子</a>有时候会不显示访问量，故想给博客上一个CDN加速访问速度。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://cdn.zengchen233.cn/img/202112301617998.png" alt="image-20211230161706882" loading="lazy"></p><h2 id="点击配置"><a href="#点击配置" class="headerlink" title="点击配置"></a>点击配置</h2><h3 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h3><p>点击缓存控制，分别勾选</p><ul><li><input checked="" disabled="" type="checkbox"> 分段缓存</li><li><input checked="" disabled="" type="checkbox"> 浏览器缓存</li><li><input checked="" disabled="" type="checkbox"> 设备适配 Auto_Device</li><li><input checked="" disabled="" type="checkbox"> 离线模式</li></ul><p>其他可以不选择，<del>缓存规则我自己还没整清楚</del>，哈哈哈…</p><p><img src="https://cdn.zengchen233.cn/img/202112301623657.png" alt="image-20211230162336485" loading="lazy"></p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>点击性能优化，勾选</p><ul><li><input checked="" disabled="" type="checkbox"> 智能压缩</li><li><input checked="" disabled="" type="checkbox"> 页面压缩</li><li><input checked="" disabled="" type="checkbox"> 重定向跟随</li><li><input checked="" disabled="" type="checkbox"> 加速区域选择全球加速</li></ul><p><img src="https://cdn.zengchen233.cn/img/202112301626013.png" alt="image-20211230162617868" loading="lazy"></p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><h4 id="HTTPS配置"><a href="#HTTPS配置" class="headerlink" title="HTTPS配置"></a>HTTPS配置</h4><p><img src="https://cdn.zengchen233.cn/img/202112301627950.png" alt="image-20211230162739899" loading="lazy"></p><p>分别勾选</p><ul><li><input checked="" disabled="" type="checkbox"> HSTS配置</li><li><input checked="" disabled="" type="checkbox"> TLS1.3</li><li><input checked="" disabled="" type="checkbox"> HTTP&#x2F;2</li></ul><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>分别勾选（<del>有的自己都没搞清楚</del>）</p><ul><li><input checked="" disabled="" type="checkbox"> CORS 跨域共享</li><li><input checked="" disabled="" type="checkbox"> IP 访问限制（ 30次&#x2F;分，60秒)</li><li><input checked="" disabled="" type="checkbox"> WAF 保护</li></ul><h3 id="成本控制"><a href="#成本控制" class="headerlink" title="成本控制"></a>成本控制</h3><p><img src="https://cdn.zengchen233.cn/img/202112301631718.png" alt="image-20211230163106618" loading="lazy"></p><h3 id="图片处理，边缘规则"><a href="#图片处理，边缘规则" class="headerlink" title="图片处理，边缘规则"></a>图片处理，边缘规则</h3><p>这两个我都没开，还没整清楚，等整清楚了再单独开一期。</p><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2><p>等待几分钟就可以使用你的加速域名来进行访问你的博客了，尽情享受吧！</p>]]></content>
      
      
      <categories>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又拍云联盟</title>
      <link href="/posts/54b83927/"/>
      <url>/posts/54b83927/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 自己原来搭建图床总是要把图片上传到Github然后通过<a href="https://www.jsdelivr.com/">www.jsdelivr.com</a>来进行加速，但是这个网站很奇怪，总是容易挂掉，我有一天无聊在网上发现了<a href="https://www.upyun.com/">又拍云</a>发现业界十分好评，我就抱着试一试的态度去尝试了一下，发现真的很好用，先来推荐给大家。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里来向大家推荐一下又拍云，欢迎大家使用又拍云，有一个活动叫又拍云联盟，可以每个月<del>白嫖</del>一部分免费存储空间和免费CDN流量。</p><p><img src="https://cdn.zengchen233.cn/img/202112222007403.png" alt="image-20211222200711297" loading="lazy"></p><p>我们就需要在网站底部添加一段信息:</p><blockquote><p><span>本网站由</span><a class="footer-support-logo" href="[https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral](https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral)" target="blank" title="又拍云"><img height="30" src="https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/logo/upyun-logo.png" alt="又拍云" loading="lazy"></a><span>提供 CDN 加速</span></p></blockquote><p>代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>本网站由<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer-support-logo<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral](https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral)<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>又拍云<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/logo/upyun-logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>又拍云<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>提供 CDN 加速<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>代码效果如上⬆</p><h2 id="什么是CDN？"><a href="#什么是CDN？" class="headerlink" title="什么是CDN？"></a>什么是CDN？</h2><p>CDN 的全称是 Content Delivery Network，即内容分发网络。</p><p>CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><blockquote><p>更多的内容您可以参见 <a href="https://baike.baidu.com/item/CDN">CDN | 百度百科</a></p></blockquote><p>简而言之，CDN 做的事情就是将你的站点静态文件缓存在各个城市的节点，一旦有人访问你的站点，CDN 便会让其去最近的节点取资源，使得网站的访问速度尽可能提高。也分担了站点的访问压力。</p><p>我的博客现在还没什么访问量，就没有上CDN，等啥时候我的服务器不堪重负（<del>这辈子怕是不可能了</del>😭😭）了在上CDN吧…</p><p>在这里插播一条广告：</p><p>这里是我的又拍<a href="https://console.upyun.com/register/?invite=S1DwXaRcF">云返利链接</a>从这里注册并消费我会吃到回扣！（当然其实又拍云联盟赠送的量对于个人来说就基本够用了。赠送的额度不够用的时候，说明有很多人在关注你啦，就去找又拍云合作吧！）</p><h2 id="又拍云服务"><a href="#又拍云服务" class="headerlink" title="又拍云服务"></a>又拍云服务</h2><h3 id="云存储-图床"><a href="#云存储-图床" class="headerlink" title="云存储 - 图床"></a>云存储 - 图床</h3><p>说到云存储，其实各大云服务商都有各自类似的服务。腾讯云的叫作为对象存储<code>COS</code>（Cloud Object Storage），阿里云的则叫作对象存储 <code>OSS</code>（Object Storage Service）。</p><p>博客图片对于站长来说有时是一个大难题，一是图片逐渐增多时、体积和备份的问题，二则是图片加载往往会占用不少带宽。<br>所以我的博文也总是尽量以文字为主，偶尔穿插进几张图片。</p><p>写 Markdown 时，图片往往是使用链接的方式放在文章中，这是便会用到我们所说的图床。<br>即上传自己的图片，它提供一个可以访问的链接给你。</p><p>有一些公共的图床服务，譬如 <a href="https://sm.ms/">sm.ms</a>、<a href="https://imgtu.com/">路过图床</a>。你可以使用它们，但是图片往往会被审核、而在你毫不知情的情况下被删除，而使用的图床服务较为小众，还有跑路的风险。<br>    我博客此前不少的图片放在了 <code>Github</code> 上，但是后来一段时间它在国内常常无法正常加载，经常网站挂掉。</p><p>所以最后我基本都将其迁移至了又拍云的云存储，一是我可以享受又拍云独有的 <code>WebP</code> 自适应功能，二则是我可以共用我的代金券（继续白嫖），且在国内能有一个还不错的访问速度。</p><h3 id="全球加速"><a href="#全球加速" class="headerlink" title="全球加速"></a>全球加速</h3><p>虽然咱的博客基本都是中文，面向国内的，但是谁不想走向世界国际化呢？我自然也希望她（我的博客）能在国外同样可以流畅地打开。</p><p>而腾讯云赠送的 CDN 流量则只支持国内加速。又拍云则同样提供了全球加速的选项。</p><h2 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h2><p>我是通过<code>Typora</code>和<code>Picgo</code>来进行图片上传到又拍云的，<code>Typora</code>最近又出了正是本本，毫无疑问贫穷的我冲了<code>Typora</code>，详情可见：</p><iframe src="//player.bilibili.com/player.html?aid=252173792&bvid=BV1TY411x7dt&cid=457500640&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>然后Typora的设置可以参照我的设置大家进行调整：</p><p><img src="https://cdn.zengchen233.cn/img/202112231433515.png" alt="image-20211223143348410" loading="lazy"></p><details>  <summary>小请求🌪</summary>  希望大家可以点击我的连接注册一下下，如果更有可能还可以消费一下，嘿嘿！😊</details><h2 id="如何使用CDN"><a href="#如何使用CDN" class="headerlink" title="如何使用CDN"></a>如何使用CDN</h2><p>等我的博客需要用到CDN的时候我再来更新吧，今天就到这里，大家下次再见！</p>]]></content>
      
      
      <categories>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件设计师顺利拿下</title>
      <link href="/posts/a49b2911/"/>
      <url>/posts/a49b2911/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 今天上课的时候突然李楷彬喊我查成绩，激动了大半节课，终于查出来了软考的成绩。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><hr><p><img src="http://cdn.zengchen233.cn/img/202112201855545.png" alt="软考成绩单" loading="lazy"></p><p>拿捏哈哈！</p>]]></content>
      
      
      <categories>
          
          <category> 考证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM项目的基本配置文件</title>
      <link href="/posts/d196d015/"/>
      <url>/posts/d196d015/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 最近在学习Spring的时候发现了需要写很多配置文件，每次写练手项目的时候就很难受，到处没有模板，故写此文章来记录。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p><code>mybatis-config.xml</code></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p><code>spring-dao.xml</code></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/数据库名称?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>数据库用户名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>数据库密码<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:cn/zengchen233/dao/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><code>applicationContext.xml</code></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>自动装配Bean需要用到这个注解<code>&lt;aop:component-scan base-package=&quot;cn.zengchen233&quot;/&gt;</code></p><p>然后在类中配置<code>@Component</code>,这个注解可以在后面增加括号指定Bean的名称 <code>@Component(&quot;名称&quot;)</code></p><p><strong>注意注意！必须要开启注解，要不然不管用的。</strong></p><p>还有自动装配需要这个注解<code>&lt;context:annotation-config/&gt;</code> 有的时候在类中用到了其他类，这个时候有很懒不想去配置xml配置文件，这个时候通过<code>@Autowired</code>自动装配方式，从<code>IoC</code>容器中去查找到，并返回给该属性，很棒！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="/posts/4a3d459a/"/>
      <url>/posts/4a3d459a/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 在狂神说学习Docker，本文章主要记录一些项目的实战。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p><em><strong><u>注：本文假设阅读者会使用Docker。</u></strong></em></p><h1 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h1><h2 id="搜索并下载镜像"><a href="#搜索并下载镜像" class="headerlink" title="搜索并下载镜像"></a>搜索并下载镜像</h2><pre class="language-shell" data-language="shell"><code class="language-shell">[root@zengchen ~]# docker search nginxNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDnginx                             Official build of Nginx.                        15903     [OK]jwilder&#x2F;nginx-proxy               Automated Nginx reverse proxy for docker con…   2098                 [OK]richarvey&#x2F;nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   820                  [OK]jc21&#x2F;nginx-proxy-manager          Docker container for managing Nginx proxy ho…   285linuxserver&#x2F;nginx                 An Nginx container, brought to you by LinuxS…   160tiangolo&#x2F;nginx-rtmp               Docker image with Nginx using the nginx-rtmp…   147                  [OK]jlesage&#x2F;nginx-proxy-manager       Docker container for Nginx Proxy Manager        144                  [OK]alfg&#x2F;nginx-rtmp                   NGINX, nginx-rtmp-module and FFmpeg from sou…   110                  [OK]nginxdemos&#x2F;hello                  NGINX webserver that serves a simple page co…   79                   [OK]privatebin&#x2F;nginx-fpm-alpine       PrivateBin running on an Nginx, php-fpm &amp; Al…   61                   [OK]nginx&#x2F;nginx-ingress               NGINX and  NGINX Plus Ingress Controllers fo…   57nginxinc&#x2F;nginx-unprivileged       Unprivileged NGINX Dockerfiles                  54nginxproxy&#x2F;nginx-proxy            Automated Nginx reverse proxy for docker con…   28staticfloat&#x2F;nginx-certbot         Opinionated setup for automatic TLS certs lo…   25                   [OK]nginx&#x2F;nginx-prometheus-exporter   NGINX Prometheus Exporter for NGINX and NGIN…   22schmunk42&#x2F;nginx-redirect          A very simple container to redirect HTTP tra…   19                   [OK]centos&#x2F;nginx-112-centos7          Platform for running nginx 1.12 or building …   16centos&#x2F;nginx-18-centos7           Platform for running nginx 1.8 or building n…   13flashspys&#x2F;nginx-static            Super Lightweight Nginx Image                   11                   [OK]bitwarden&#x2F;nginx                   The Bitwarden nginx web server acting as a r…   11mailu&#x2F;nginx                       Mailu nginx frontend                            9                    [OK]sophos&#x2F;nginx-vts-exporter         Simple server that scrapes Nginx vts stats a…   7                    [OK]ansibleplaybookbundle&#x2F;nginx-apb   An APB to deploy NGINX                          3                    [OK]wodby&#x2F;nginx                       Generic nginx                                   1                    [OK]arnau&#x2F;nginx-gate                  Docker image with Nginx with Lua enabled on …   1                    [OK][root@zengchen ~]# docker pull nginxUsing default tag: latestlatest: Pulling from library&#x2F;nginxe5ae68f74026: Pull complete21e0df283cd6: Pull completeed835de16acd: Pull complete881ff011f1c9: Pull complete77700c52c969: Pull complete44be98c0fab6: Pull completeDigest: sha256:92a41cec180dd3cc645e5a8968d41b4aba786c4956e20020212e1d5636a7eda5Status: Downloaded newer image for nginx:latestdocker.io&#x2F;library&#x2F;nginx:latest</code></pre><p>详细信息可以去<a href="https://registry.hub.docker.com/_/nginx">官网</a>查看</p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a><strong>运行测试</strong></h2><pre class="language-shell" data-language="shell"><code class="language-shell">[root@zengchen html]# docker run -d -p 8090:80 --name nginx -v &#x2F;home&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx[root@zengchen html]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                  NAMES04e68d8e70e7   nginx     &quot;&#x2F;docker-entrypoint.…&quot;   57 seconds ago   Up 56 seconds   0.0.0.0:8090-&gt;80&#x2F;tcp   nginx</code></pre><p>可以通过<code>curl localhost:8090</code>来查看网页源代码。</p><h1 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h1><h2 id="搜索并下载镜像-1"><a href="#搜索并下载镜像-1" class="headerlink" title="搜索并下载镜像"></a>搜索并下载镜像</h2><pre class="language-shell" data-language="shell"><code class="language-shell">[root@zengchen ~]# docker search tomcatNAME                          DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDtomcat                        Apache Tomcat is an open source implementati…   3186      [OK]tomee                         Apache TomEE is an all-Apache Java EE certif…   94        [OK]dordoka&#x2F;tomcat                Ubuntu 14.04, Oracle JDK 8 and Tomcat 8 base…   58                   [OK]kubeguide&#x2F;tomcat-app          Tomcat image for Chapter 1                      31consol&#x2F;tomcat-7.0             Tomcat 7.0.57, 8080, &quot;admin&#x2F;admin&quot;              18                   [OK]cloudesire&#x2F;tomcat             Tomcat server, 6&#x2F;7&#x2F;8                            15                   [OK]aallam&#x2F;tomcat-mysql           Debian, Oracle JDK, Tomcat &amp; MySQL              13                   [OK]arm32v7&#x2F;tomcat                Apache Tomcat is an open source implementati…   11andreptb&#x2F;tomcat               Debian Jessie based image with Apache Tomcat…   10                   [OK]rightctrl&#x2F;tomcat              CentOS , Oracle Java, tomcat application ssl…   7                    [OK]arm64v8&#x2F;tomcat                Apache Tomcat is an open source implementati…   6unidata&#x2F;tomcat-docker         Security-hardened Tomcat Docker container.      5                    [OK]amd64&#x2F;tomcat                  Apache Tomcat is an open source implementati…   3jelastic&#x2F;tomcat               An image of the Tomcat Java application serv…   2cfje&#x2F;tomcat-resource          Tomcat Concourse Resource                       2oobsri&#x2F;tomcat8                Testing CI Jobs with different names.           2fabric8&#x2F;tomcat-8              Fabric8 Tomcat 8 Image                          2                    [OK]camptocamp&#x2F;tomcat-logback     Docker image for tomcat with logback integra…   1                    [OK]picoded&#x2F;tomcat7               tomcat7 with jre8 and MANAGER_USER &#x2F; MANAGER…   1                    [OK]ppc64le&#x2F;tomcat                Apache Tomcat is an open source implementati…   1chenyufeng&#x2F;tomcat-centos      tomcat基于centos6的镜像                              1                    [OK]99taxis&#x2F;tomcat7               Tomcat7                                         1                    [OK]secoresearch&#x2F;tomcat-varnish   Tomcat and Varnish 5.0                          0                    [OK]softwareplant&#x2F;tomcat          Tomcat images for jira-cloud testing            0                    [OK]s390x&#x2F;tomcat                  Apache Tomcat is an open source implementati…   0</code></pre><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><pre class="language-shell" data-language="shell"><code class="language-shell">[root@zengchen ~]# docker run -d -p 8090:8080 --name tomcat -v                               &#x2F;home&#x2F;tomcat&#x2F;test:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;test tomcat:9.0920314ff05613f32ccd8167b4aedcc867a0ead219371ec04f708784c51b3f036</code></pre><p>可以首先进入容器<code>    docker exec -it 62d770e36ad9a5 /bin/bash</code></p><p>找到tomcat的根目录，你会发现<code>webapps</code>下面什么东西都没有，这时候就要执行一条命令：<code>cp -r webapps.dist/* webapps/</code></p><pre class="language-shell" data-language="shell"><code class="language-shell">root@62d770e36ad9:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps# lsROOT  docs  examples  host-manager  manager</code></pre><p>然后东西就全部进来了。</p><p>这个时候就可以<code>curl localhost:8090</code></p><pre class="language-html" data-language="html"><code class="language-html">[root@zengchen ~]# curl localhost:8090<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTTP Status 404 – Not Found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">font-family</span><span class="token punctuation">:</span>Tahoma<span class="token punctuation">,</span>Arial<span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">h1, h2, h3, b</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#525D76<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">h1</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span>22px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">h2</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span>16px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">h3</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span>12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">a</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.line</span> <span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>1px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#525D76<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>HTTP Status 404 – Not Found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Type<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> Status Report<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Description<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Apache Tomcat/9.0.55<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="创建自己的镜像"><a href="#创建自己的镜像" class="headerlink" title="创建自己的镜像"></a>创建自己的镜像</h1><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>这里的路径为<code>/home/tomcat</code></p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centosMAINTAINER zengchen&lt;1239571995@qq.com&gt;COPY README.txt &#x2F;usr&#x2F;local&#x2F;README.txtADD jdk-8u311-linux-x64.tar.gz &#x2F;usr&#x2F;localADD apache-tomcat-9.0.55.tar.gz &#x2F;usr&#x2F;localRUN yum -y install vimENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATHENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_311ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.55ENV CATALINA_BASE &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.55ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;binEXPOSE 8080CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.55&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.55&#x2F;bin&#x2F;logs&#x2F;catalina.out</code></pre><p>这里的tomcat和jdk就需要自己去下载了。</p><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><pre class="language-shell" data-language="shell"><code class="language-shell">docker build -t zengchen233&#x2F;dittomcat:1.0 .</code></pre><h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><pre class="language-shell" data-language="shell"><code class="language-shell">docker run -d -p 8090:8080 --name diytomcat -v &#x2F;home&#x2F;tomcat&#x2F;webapps&#x2F;自己项目的路径:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.55&#x2F;webapps&#x2F;自己项目的路径 -v &#x2F;home&#x2F;tomcat&#x2F;webapps&#x2F;tomcatlogs&#x2F;:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.55&#x2F;logs diytomcat</code></pre><p>这个时候就可以<code>curl localhost:8090</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20岁生日啦!</title>
      <link href="/posts/4756f01a/"/>
      <url>/posts/4756f01a/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 今天是我20岁生日啦！</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>今天是个很特殊的日子，嘿嘿，今天是我的20岁生日！过去的20岁我过的很平淡，没有什么很突出的地方，没有什么很出众的地方，但是我还是一步一步的走到了今天。20岁在古时候就意味着要成家，要独当一面，但是现在我还是个学生，我会好好读书来让自己更加成熟，让自己可以渐渐的独当一面！</p><p>今天思思也给我买了一个生日蛋糕子！不说了上图片！</p><p><img src="http://cdn.zengchen233.cn/img/202112201852817.jpg" loading="lazy"></p><hr><p><img src="http://cdn.zengchen233.cn/img/202112201853599.jpg" loading="lazy"></p><hr><p>真的是万飞开心欸！希望以后都可以这样，太棒啦！ヾ(≧▽≦*)o！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>班级篮球赛</title>
      <link href="/posts/4d820402/"/>
      <url>/posts/4d820402/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 班级篮球赛结束啦！</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>班级篮球赛终于结束啦，想着把我的精彩图片发到博客来纪念一下！</p><iframe src="//player.bilibili.com/player.html?aid=721029773&bvid=BV1UQ4y1B7Jq&cid=424604671&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><img src="http://cdn.zengchen233.cn/img/202112201856185.jpeg" alt="1" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201858491.jpeg" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201859065.jpeg" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201901891.jpeg" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201903671.jpg" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201904472.jpg" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201904950.jpg" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201904881.jpg" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201905974.jpg" loading="lazy"></p><p><img src="http://cdn.zengchen233.cn/img/202112201905482.jpg" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebStorm快捷键</title>
      <link href="/posts/4219ed39/"/>
      <url>/posts/4219ed39/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 常用的WebStorm快捷键（不断更新）</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>下面是Webstorm的一些常用快捷键：</p><pre class="language-none"><code class="language-none">1. ctrl + shift + n: 打开工程中的文件，目的是打开当前工程下任意目录的文件。2. ctrl + j: 输出模板3. ctrl + b: 跳到变量申明处4. ctrl + alt + T: 围绕包裹代码(包括zencoding的Wrap with Abbreviation)5. ctrl + []: 匹配 &#123;&#125;[]6. ctrl + F12: 可以显示当前文件的结构7. ctrl + x: 剪切(删除)行，不选中，直接剪切整个行，如果选中部分内容则剪切选中的内容8. alt + left&#x2F;right:标签切换9. ctrl + r: 替换10. ctrl + shift + up: 行移动11. shift + alt + up: 块移动(if()&#123;&#125;,while()&#123;&#125;语句块的移动)12. ctrl + d: 行复制13. ctrl + shift + ]&#x2F;[: 选中块代码14. ctrl + &#x2F; : 单行注释15. ctrl + shift + &#x2F; : 块注释16. ctrl + shift + i : 显示当前CSS选择器或者JS函数的详细信息17. ctrl + &#39;-&#x2F;+&#39;: 可以折叠项目中的任何代码块，它不是选中折叠，而是自动识别折叠。18. ctrl + &#39;.&#39;: 折叠选中的代码的代码。19. ctrl+&#x2F; 单行注释20. ctrl+shift+&#x2F;块注释21. ctrl+shift+ +&#x2F;-展开&#x2F;折叠22. ctrl+alt+L 格式化代码23. ctrl+shift+ up&#x2F;down 上下移动句子24. Alt+回车 导入包,自动修正25. Ctrl+N 查找类26. Ctrl+Shift+N 查找文件27. Ctrl+Alt+L 格式化代码28. Ctrl+Alt+O 优化导入的类和包29. Alt+Insert 生成代码(如get,set方法,构造函数等)30. Ctrl+E或者Alt+Shift+C 最近更改的代码31. Ctrl+R 替换文本32. Ctrl+F 查找文本33. Ctrl+Shift+Space 自动补全代码34. Ctrl+空格 代码提示35. Ctrl+Alt+Space 类名或接口名提示36. Ctrl+P 方法参数提示37. Ctrl+Shift+Alt+N 查找类中的方法或变量38. Alt+Shift+C 对比最近修改的代码39. Shift+F6 重构-重命名40. Ctrl+Shift+先上键41. Ctrl+X 删除行42. Ctrl+D 复制行43. Ctrl+&#x2F; 或 Ctrl+Shift+&#x2F; 注释（&#x2F;&#x2F; 或者&#x2F;*...*&#x2F; ）44. Ctrl+J 自动代码45. Ctrl+E 最近打开的文件46. Ctrl+H 显示类结构图47. Ctrl+Q 显示注释文档48. Alt+F1 查找代码所在位置49. Alt+1 快速打开或隐藏工程面板</code></pre><hr><p>参考</p><ul><li><a href="https://zengchen233.cn/posts/c01e70d5/">IDEA常规快捷键</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - WebStorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四六级双双过关</title>
      <link href="/posts/7b403b35/"/>
      <url>/posts/7b403b35/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 四级和六级都过啦！</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>四级成绩：</p><p><img src="http://cdn.zengchen233.cn/img/202112201855578.png" alt="四级成绩单" loading="lazy"></p><p>六级成绩：</p><p><img src="http://cdn.zengchen233.cn/img/202112201855702.png" alt="六级成绩单" loading="lazy"></p><p>希望下一次可以向500分迈进！加油！😊😊😊</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记</title>
      <link href="/posts/5177b49d/"/>
      <url>/posts/5177b49d/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> MyBatis学习笔记，仅供自己学习使用。视频地址：<a href="https://www.bilibili.com/video/BV1NE411Q7Nx">【狂神说Java】Mybatis最新完整教程IDEA版通俗易懂</a></p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><p>我们先来谈谈什么是MyBatis：</p><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li><li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p><ul><li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li><li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li><li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li></ul><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p><ul><li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li><li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li></ul><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p><strong>什么是持久层？</strong></p><ul><li>完成持久化工作的代码块 .  —-&gt;  dao层 【DAO (Data Access Object)  数据访问对象】</li><li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li><li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</li><li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。【说白了就是用来操作数据库存在的！】</li></ul><h2 id="为什么需要Mybatis"><a href="#为什么需要Mybatis" class="headerlink" title="为什么需要Mybatis"></a>为什么需要Mybatis</h2><ul><li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p></li><li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</p></li><li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) –&gt;对象关系映射</strong></p></li><li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p></li><li><p>MyBatis的<strong>优点</strong></p></li><li><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供xml标签，支持编写动态sql。</li><li>…….</li></ul></li><li><p>最重要的一点，使用的人多！公司需要！</p></li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="首先需要在Maven导jar包"><a href="#首先需要在Maven导jar包" class="headerlink" title="首先需要在Maven导jar包"></a>首先需要在Maven导jar包</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="编写MyBatis核心配置文件"><a href="#编写MyBatis核心配置文件" class="headerlink" title="编写MyBatis核心配置文件"></a>编写MyBatis核心配置文件</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入外部配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>local.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--标准的日志工厂实现--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--&lt;setting name="logImpl" value="LOG4J"/>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--起别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.zengchen233.pojo.Blog<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--绑定接口--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.zengchen233.dao.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="编写MyBatis工具类"><a href="#编写MyBatis工具类" class="headerlink" title="编写MyBatis工具类"></a>编写MyBatis工具类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token comment">// SqlSessionFactory --> SqlSession</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取sqlSessionFactory对象</span>            <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL</span>    <span class="token comment">// 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSession</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动化提交</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>常见资源导出不了的问题，在pom.xml添加如下代码：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><blockquote><p>思考：我们在测试SQL的时候，要是能够在控制台输出 SQL 的话，是不是就能够有更快的排错效率？</p></blockquote><p>如果一个 数据库相关的操作出现了问题，我们可以根据输出的SQL语句快速排查问题。</p><p>对于以往的开发过程，我们会经常使用到debug模式来调节，跟踪我们的代码执行过程。但是现在使用Mybatis是基于接口，配置文件的源代码执行过程。因此，我们必须选择日志工具来作为我们开发，调节程序的工具。</p><p>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li>Log4j</li><li>JDK logging</li></ul><p>具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。它会使用最先找到的（按上文列举的顺序查找）。如果一个都未找到，日志功能就会被禁用。</p><h3 id="标准日志实现"><a href="#标准日志实现" class="headerlink" title="标准日志实现"></a><strong>标准日志实现</strong></h3><p>指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a><strong>Log4j</strong></h3><p><strong>简介：</strong></p><ul><li>Log4j是Apache的一个开源项目</li><li>通过使用Log4j，我们可以控制日志信息输送的目的地：控制台，文本，GUI组件….</li><li>我们也可以控制每一条日志的输出格式；</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li></ul><p><strong>使用步骤：</strong></p><p>1、导入log4j的包</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、配置文件编写</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment">#控制台输出的相关设置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%c]-%m%n</span><span class="token comment">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/kuang.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><span class="token comment">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span></code></pre><h3 id="setting设置日志实现"><a href="#setting设置日志实现" class="headerlink" title="setting设置日志实现"></a>setting设置日志实现</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h3 id="在程序中使用Log4j进行输出！"><a href="#在程序中使用Log4j进行输出！" class="headerlink" title="在程序中使用Log4j进行输出！"></a>在程序中使用Log4j进行输出！</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注意导包：org.apache.log4j.Logger</span><span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MyTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info：进入selectUser方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug：进入selectUser方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error: 进入selectUser方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="limit实现分页"><a href="#limit实现分页" class="headerlink" title="limit实现分页"></a>limit实现分页</h2><p><strong>思考：为什么需要分页？</strong></p><p>在学习mybatis等持久层框架的时候，会经常对数据进行增删改查操作，使用最多的是对数据库进行查询操作，如果查询大量数据的时候，我们往往使用分页进行查询，也就是每次处理小部分数据，这样对数据库压力就在可控范围内。</p><h3 id="使用Limit实现分页"><a href="#使用Limit实现分页" class="headerlink" title="使用Limit实现分页"></a><strong>使用Limit实现分页</strong></h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#语法</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">LIMIT</span> stratIndex，pageSize<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 检索记录行 6-15  </span><span class="token comment">#为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1：   </span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">LIMIT</span> <span class="token number">95</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 检索记录行 96-last.  </span><span class="token comment">#如果只给定一个参数，它表示返回最大的记录行数目：   </span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//检索前 5 个记录行  </span><span class="token comment">#换句话说，LIMIT n 等价于 LIMIT 0,n。 </span></code></pre><p><strong>步骤：</strong></p><p>1、修改Mapper文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>2、Mapper接口，参数为map</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//选择全部用户实现分页</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、在测试类中传入参数测试</p><ul><li>推断：<font color="red">起始位置 &#x3D;  （当前页面 - 1 ） * 页面大小 </font>（这个很重要，项目中都能用上）</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//分页查询 , 两个参数startIndex , pageSize</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> currentPage <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//第几页</span>   <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//每页显示几个</span>   <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>currentPage<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="利用注解开发"><a href="#利用注解开发" class="headerlink" title="利用注解开发"></a>利用注解开发</h2><ul><li><p><strong>mybatis最初配置信息是基于 XML ,映射语句(SQL)也是定义在 XML 中的。而到MyBatis 3提供了新的基于注解的配置。不幸的是，Java 注解的的表达力和灵活性十分有限。最强大的 MyBatis 映射并不能用注解来构建</strong></p></li><li><p>sql 类型主要分成 :</p></li><li><ul><li>@select ()</li><li>@update ()</li><li>@Insert ()</li><li>@delete ()</li></ul></li></ul><p><strong>注意：</strong>利用注解开发就不需要mapper.xml映射文件了 .</p><h3 id="关于-Param"><a href="#关于-Param" class="headerlink" title="关于@Param"></a>关于@Param</h3><p>@Param注解用于给方法参数起一个名字。以下是总结的使用原则：</p><ul><li>在方法只接受一个参数的情况下，可以不使用@Param。</li><li>在方法接受多个参数的情况下，建议一定要使用@Param注解给参数命名。</li><li>如果参数是 JavaBean ， 则不能使用@Param。</li><li>不使用@Param注解时，参数只能有一个，并且是Javabean。</li></ul><h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#与$的区别"></a>#与$的区别</h3><ul><li><p>#{} 的作用主要是替换预编译语句(PrepareStatement)中的占位符? 【推荐使用】</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token comment">#&#123;name&#125;);</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>?<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>${} 的作用是直接进行字符串替换</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'$&#123;name&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'kuangshen'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>使用注解和配置文件协同开发，才是MyBatis的最佳实践！</p></blockquote><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>什么是动态SQL：<strong>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.</strong></p><pre class="language-none"><code class="language-none">官网描述：MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。  -------------------------------  - if  - choose (when, otherwise)  - trim (where, set)  - foreach  -------------------------------</code></pre><p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p><p>那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--需求1：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIf<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog where   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      title = #&#123;title&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      and author = #&#123;author&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>这样写我们可以看到，如果 author 等于 null，那么查询语句为 select * from user where title&#x3D;#{title},但是如果title为空呢？那么查询语句为 select * from user where and author&#x3D;#{author}，这是错误的 SQL 语句，如何解决呢？请看下面的 where 语句！</p><h3 id="Where语句"><a href="#Where语句" class="headerlink" title="Where语句"></a>Where语句</h3><p>修改上面的SQL语句；</p><pre class="language-none"><code class="language-none">&lt;select id&#x3D;&quot;queryBlogIf&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;blog&quot;&gt;  select * from blog   &lt;where&gt;       &lt;if test&#x3D;&quot;title !&#x3D; null&quot;&gt;          title &#x3D; #&#123;title&#125;       &lt;&#x2F;if&gt;       &lt;if test&#x3D;&quot;author !&#x3D; null&quot;&gt;          and author &#x3D; #&#123;author&#125;       &lt;&#x2F;if&gt;   &lt;&#x2F;where&gt;&lt;&#x2F;select&gt;</code></pre><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p><h3 id="Set语句"><a href="#Set语句" class="headerlink" title="Set语句"></a>Set语句</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注意set是用的逗号隔开--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  update blog     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title = #&#123;title&#125;,         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            author = #&#123;author&#125;         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h3 id="choose语句"><a href="#choose语句" class="headerlink" title="choose语句"></a>choose语句</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                title = #&#123;title&#125;           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              and author = #&#123;author&#125;           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>              and views = #&#123;views&#125;           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</p><p><strong>提取SQL片段：</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      title = #&#123;title&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      and author = #&#123;author&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><p><strong>引用SQL片段：</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIf<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>注意：</p><p>①、最好基于 单表来定义 sql 片段，提高片段的可重用性</p><p>②、在 sql 片段中不要包括 where</p><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><p>将数据库中前三个数据的id修改为1,2,3；</p><p>需求：我们需要查询 blog 表中 id 分别为1,2,3的博客信息</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from blog   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--       collection:指定输入对象中的集合属性       item:每次遍历生成的对象       open:开始遍历时的拼接字符串       close:结束时拼接的字符串       separator:遍历对象之间需要拼接的字符串       select * from blog where 1=1 and (id=1 or id=2 or id=3)     --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span>  <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          id=#&#123;id&#125;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>这里还没学，等学了再来更新。。。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dao层的撰写模板</title>
      <link href="/posts/76d2171/"/>
      <url>/posts/76d2171/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 记录项目的Dao层的模板，用来实现代码复用，功能：连接数据库，增删改查CRUD，关闭连接资源。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p><code>BaseDao.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//操作数据库的公共类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">//静态代码块，类加载的时候就初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过类加载器读取对应的资源</span>        <span class="token comment">//云服务器</span>        <span class="token comment">// InputStream is = BaseDao.class.getClassLoader().getResourceAsStream("database.properties");</span>        <span class="token comment">//本地服务器</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">BaseDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"local.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取数据库链接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// System.out.println("数据库初始化中...");</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// System.out.println("数据库连接成功!");</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写查询公共类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ResultSet</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">PreparedStatement</span> preparedStatement<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">,</span> <span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//用到了预编译，不需要传参,直接执行</span>        preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//占位符从1开始，但是数组从0开始 可能有很多问号 问号从1开始</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写增删改公共方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span>  <span class="token class-name">PreparedStatement</span> preparedStatement<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//用到了预编译，不需要传参,直接执行</span>        preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//占位符从1开始，但是数组从0开始 可能有很多问号 问号从1开始</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//释放资源</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">closeResources</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">PreparedStatement</span> preparedStatement<span class="token punctuation">,</span> <span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//GC回收</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//GC回收</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//GC回收</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库名字踩坑</title>
      <link href="/posts/763d2423/"/>
      <url>/posts/763d2423/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 数据库名字踩坑。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>今天在做项目的时候发现配置好的<code>local.properties</code>文件，BaseDao无法通过这个文件连接到数据库，我千辛万苦的排错，最终在打印出来<code>properties</code>文件的时候发现乱码了…</p><p><img src="http://cdn.zengchen233.cn/img/202112201855176.jpeg" loading="lazy"></p><p>居然乱码了😭😭😭</p><p>原因是数据库名字是中文：宿舍管理系统，但是在打印的时候直接乱码，在我改成英文后就能跑了，太难啦！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb中的监听器和过滤器</title>
      <link href="/posts/cc734e38/"/>
      <url>/posts/cc734e38/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> JavaWeb中的监听器和过滤器他们的用法详解。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h2><p>比如说写一个LoginDemo</p><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li><p>用户登录之后，向Sesison中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p></li></ol><p>我们可以使用过滤器来过滤掉非法请求，示例代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Constant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> resp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span>USER_SESSION<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/500.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上述代码讲的是过滤掉&#x2F;sys&#x2F;*下面的全部请求，如果没有这个Session就会把你重定向到&#x2F;500.jsp这么页面底下，完美解决了登陆问题，完整代码：<a href="https://gitee.com/azeng233/javaweb-learning/tree/master/LoginDemo">LoginDemo</a>。</p><h2 id="监听器Listener"><a href="#监听器Listener" class="headerlink" title="监听器Listener"></a>监听器Listener</h2><p>监听器可以用来监听很多事件的发生，一般用在gui编程当中，此处是web编程用来监听在线人数，示例代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSessionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSessionListener</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OnlineCountListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> ctx <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// System.out.println(se.getSession().getId());</span>        <span class="token class-name">Integer</span> onlineCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"OnlineCount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onlineCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> onlineCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ctx<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"OnlineCount"</span><span class="token punctuation">,</span>onlineCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> ctx <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// System.out.println(se.getSession().getId());</span>        <span class="token class-name">Integer</span> onlineCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"OnlineCount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onlineCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> onlineCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ctx<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"OnlineCount"</span><span class="token punctuation">,</span>onlineCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>此处用到了装箱拆箱，这块地方还不怎么懂，还需要复习复习Java SE。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web.xml中&lt;context-param&gt;标签的作用</title>
      <link href="/posts/290d96b8/"/>
      <url>/posts/290d96b8/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> web.xml中<context-param>标签的作用。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h3 id="获取初始化参数"><a href="#获取初始化参数" class="headerlink" title="获取初始化参数"></a>获取初始化参数</h3><p>首先在web.xml中配置一下信息</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>jdbc:mysql://mysql.zengchen233.cn:3306/广告墙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre><p>通过以上定义，我们可以在一个新的Servlet中获取到这个<code>param-name</code></p><p>示例代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">//获取初始化数据</span><span class="token keyword">public</span> <span class="token keyword">class</span> getParameterServlet <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"获取的url为"</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>综上所述<context-param>标签的作用可以总结如下</p><p>web.xml的配置中<context-param>配置作用</p><ul><li>启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <listener></listener> 和 <context-param></context-param></li><li>紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.</li><li>容器将<context-param></context-param>转化为键值对,并交给ServletContext.</li><li>容器创建<listener></listener>中的类实例,即创建监听.</li><li>在监听中会有contextInitialized(ServletContextEvent args)初始化方法,在这个方法中获得ServletContext &#x3D; ServletContextEvent.getServletContext();<br>context-param的值 &#x3D; ServletContext.getInitParameter(“context-param的键”);</li><li>得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早.<br>换句话说,这个时候,你对<context-param>中的键值做的操作,将在你的WEB项目完全启动之前被执行.</li><li>举例.你可能想在项目启动之前就打开数据库.<br>那么这里就可以在<context-param>中设置数据库的连接方式,在监听类中初始化数据库的连接.</li><li>这个监听是自己写的一个类,除了初始化方法,它还有销毁方法.用于关闭应用前释放资源.比如说数据库连接的关闭.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>getWriter().print()和getWriter().write()的区别</title>
      <link href="/posts/7ec30d38/"/>
      <url>/posts/7ec30d38/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> <code>getWriter().print()</code>和<code>getWriter().write()</code>的区别。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p><code>resp.getWriter()</code>返回的是PrintWriter，这是一个打印输出流，他提供的方法是：</p><ul><li>write()：仅支持输出字符类型数据，字符、字符数组、字符串等</li><li>print()：可以将各种类型（包括Object）的数据通过默认编码转换成bytes字节形式，这些字节都通过write(int c)方法被输出</li></ul><p>resp.getWriter().print(),不仅可以打印输出文本格式的（包括html标签），还可以将一个对象以默认的编码方式转换为二进制字节输出。</p><p>resp.getWriter().writer(),只能打印输出文本格式的（包括html标签），不可以打印对象</p><p>示例代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Cookie</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">//中文数据怎么传递</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieDemo03</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回数组，cookie可能存在多个</span>        <span class="token comment">//判断cookie=是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果存在怎么办</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"您上一次访问本站的时间是:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//回去cookie的名字</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这是你第一次访问本站"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"曾晨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>print()方法是将包括(Object)的数据通过默认编码转换成bytes字节形式，这些字节都通过write(int c)方法被输出，最终还是使用了write()方法。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>getAttribute和setAttribute</title>
      <link href="/posts/813c7029/"/>
      <url>/posts/813c7029/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> <code>getAttribute</code>和<code>setAttribute</code>的使用方法。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>在Servlet中，经常会有很多的Servlet，我们有时候可能在一个Servlet中存放了消息，需要从另一个servlet中请求，所以这个时候<code>getAttribute</code>和<code>setAttribute</code>就起到了很大的作用。</p><p>上示例</p><p><code>HelloServlet.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"曾晨"</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将一个数据保存在了ServletContext中，名字username，值曾晨</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        resp.getWriter().print(username);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, Servlet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        resp.sendRedirect("/practice/error");   //进行重定向</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在上述代码中，我们看这段代码<code>context.setAttribute(&quot;username&quot;,username);</code>，这里我们把一个数据<code>username = 曾晨</code>保存在了<code>ServletContext</code>中，在web.xml中注册路径为<code>/hello</code>,在看下面代码。</p><p><code>GetServlet.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了这个get请求中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"名字:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上述代码中，我们注册的路径为<code>/get</code>,此时我们直接请求<code>/get</code>显示出来的是：<code>名字：NULL</code>，我们必须先请求<code>/hello</code>,才能在<code>/get</code>中请求到正确的信息。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web.xml踩雷</title>
      <link href="/posts/e6eddb8e/"/>
      <url>/posts/e6eddb8e/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 在JavaWeb中web.xml踩得雷。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>这是新版本的web.xml初始文件，原因是我在写一个request重定向的时候无法解析</p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">$&#123;pageContext.request.contextPath&#125;&#x2F;login</code></pre><p>于是上网搜索了好久终于解决了这个问题，故此写个博客来记录一下，防止以后踩坑！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ServletContext对象</title>
      <link href="/posts/cafcf7f4/"/>
      <url>/posts/cafcf7f4/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> ServletContext对象的实操。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>最近在B站<a href="https://www.bilibili.com/video/BV12J411M7Sj?p=10">【狂神说Java】JavaWeb入门到实战</a>上学习JavaWeb，学到了ServletContext对象，就想着把学习内容写下来分享给大家。</p><p>HelloServlet.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">//        this.getInitParameter();  //初始化参数</span><span class="token comment">//        this.getServletConfig();  //servlet的配置</span><span class="token comment">//        this.getServletContext(); //servlet的上下文</span>        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"曾晨"</span><span class="token punctuation">;</span> <span class="token comment">//数据</span>        context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将一个数据保存在了ServletContext中，名字username，值username</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,Servlet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>GetServlet.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zengchen233<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"名字:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>web.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span> <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.zengchen233.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.zengchen233.servlet.GetServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>项目运行起来后先请求&#x2F;hello,然后请求&#x2F;get就会显示如下结果：</p><p><img src="http://cdn.zengchen233.cn/img/202112201854339.png" loading="lazy"></p><p>Tips:必须先请求&#x2F;hello,否则会显示 名字：NULL</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA常规快捷键</title>
      <link href="/posts/c01e70d5/"/>
      <url>/posts/c01e70d5/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 常用的IDEA快捷键（不断更新）</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><pre class="language-sh" data-language="sh"><code class="language-sh">ctrl+shift+alt：多行操作psvm：生成main()方法；fori：生成for循环；Ctrl+Alt+v：自动补齐返回值类型ctrl+o：覆写方法ctrl+i：实现接口中的方法ctrl+shift+u：大小写转换CTRL+SHIFT+Z：取消撤销Alt＋Insert：生成构造方法、getter、setterctrl+y：删除当前行Ctrl+Shift+J：将选中的行合并成一行ctrl+g：定位到某一行Ctrl+Shitft+向下箭头：将光标所在的代码块向下整体移动Ctrl+Shift+向上箭头：将光标所在的代码块向上整体移动Alt+Shift+向下箭头：将行向下移动Alt+Shift+向上箭头：将行向上移动Ctrl+F：在当前文件中查找Ctrl+R：替换字符串Ctrl+Shift+F:在全局文件中查找字符串Ctrl+Shift+R：在全局中替换字符串Ctrl+Shift+Enter：自动补齐&#123;&#125;或者分号;Shift+Enter：在当前行的下方开始新行Ctrl+Alt+Enter：在当前行的上方插入新行Ctrl+Delete：删除光标所在至单词结尾处的所有字符</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的学习笔记(四)</title>
      <link href="/posts/6b9ad521/"/>
      <url>/posts/6b9ad521/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong>  本篇是数据库的学习笔记，仅供自己学习使用。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h3 id="数据库和表的基本操作（四）"><a href="#数据库和表的基本操作（四）" class="headerlink" title="数据库和表的基本操作（四）"></a>数据库和表的基本操作（四）</h3><h4 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h4><ul><li>仅将两个表中满足连接条件的行组合起来作为结果集，称为内连接；</li><li>关键字：<code>[inner] join ...  on</code>。</li></ul><p>语法：</p><pre class="language-sql" data-language="sql"><code class="language-sql">表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">inner</span><span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 表<span class="token number">1.</span>字段<span class="token operator">=</span>表<span class="token number">2.</span>字段</code></pre><p>语法解释：</p><pre class="language-none"><code class="language-none">从表1中取出每一条记录，去表2中与所有的记录进行匹配，匹配必须是某个条件在表1中与表2中相同，最终才会保留结果，否则不保留。inner 关键字可省略不写；on 表示连接条件：条件字段就是代表相同的业务含义（如下面两张表中的 employee.dept_id 和 department.id），大多数情况下为两张表中的主外键关系。</code></pre><h4 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h4><ul><li>以某张表为主，取出里面的所有记录，然后每条与另外一张表进行连接，不管能不能匹配上条件，最终都会保留。能匹配，正确保留；不能匹配，其它表的字段都置空（<code>null</code>），称为外连接。</li><li>外连接查询分为左外连接查询和右外连接查询；</li><li>关键字：<code>left/right [outer] join ... on</code>。</li></ul><p>语法：</p><pre class="language-sql" data-language="sql"><code class="language-sql">表<span class="token number">1</span> <span class="token keyword">left</span><span class="token operator">/</span><span class="token keyword">right</span> <span class="token punctuation">[</span><span class="token keyword">outer</span><span class="token punctuation">]</span>  <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 表<span class="token number">1.</span>字段<span class="token operator">=</span>表<span class="token number">2.</span>字段</code></pre><p>语法解释：</p><pre class="language-none"><code class="language-none">左外连接：在内连接的基础上，还包含表1中所有不符合条件的数据行，并在其中的表2列填写 NULL；右外连接：在内连接的基础上，还包含表2中所有不符合条件的数据行，并在其中的表1列填写 NULL。</code></pre><blockquote><p>Tips：虽然左外连接和右外连接有主表差异，但左外连接和右外连接可以互转。</p></blockquote><h4 id="复合条件连接查询"><a href="#复合条件连接查询" class="headerlink" title="复合条件连接查询"></a>复合条件连接查询</h4><ul><li>复合条件连接查询，就是在连接查询的过程中，通过添加过滤条件来限制查询结果，使查询结果更加精确。</li></ul><h4 id="使用having子句进行分组筛选"><a href="#使用having子句进行分组筛选" class="headerlink" title="使用having子句进行分组筛选"></a>使用<code>having</code>子句进行分组筛选</h4><p>简单来说，<code>having</code>子句用来对<strong>分组后</strong>的数据进行筛选，即<code>having</code>针对查询结果中的列发挥筛选数据作用。因此<code>having</code>通常与<code>Group by</code>连用。</p><p>基本格式：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">[</span>聚合函数<span class="token punctuation">]</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 查询条件<span class="token punctuation">]</span>　<span class="token punctuation">[</span><span class="token keyword">group</span> <span class="token keyword">by</span> 字段名<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">having</span> 字段名 筛选条件<span class="token punctuation">]</span></code></pre><p><code>select</code>语句中，<code>where</code>、<code>group by</code>、<code>having</code>子句和聚合函数的执行次序如下：</p><p>1.<code>where</code>子句从数据源中去除不符合条件的数据；</p><p>2.然后<code>group by</code>子句搜集数据行到各个组中；</p><p>3.接着统计函数为各个组计算统计值；</p><p>4.最后<code>having</code>子句去掉不符合其组搜索条件的各组数据行。</p><h4 id="Having与Where的区别"><a href="#Having与Where的区别" class="headerlink" title="Having与Where的区别"></a><code>Having</code>与<code>Where</code>的区别</h4><p><code>where</code>子句都可以用<code>having</code>代替，区别在于<code>where</code>过滤行，<code>having</code>过滤分组；</p><ul><li><code>where</code>子句的作用是在对查询结果进行分组前，将不符合<code>where</code>条件的<strong>行</strong>去掉，即在分组之前过滤数据，<code>where</code>条件中<strong>不能包含聚组函数</strong>，使用<code>where</code>条件过滤出特定的行；</li><li><code>having</code>子句的作用是筛选满足条件的<strong>组</strong>，即在分组之后过滤数据，条件中<strong>经常包含聚组函数</strong>，使用<code>having</code>条件过滤出特定的组，也可以使用多个分组标准进行分组。</li></ul><h4 id="Group-By-和-Order-By"><a href="#Group-By-和-Order-By" class="headerlink" title="Group By 和 Order By"></a><code>Group By</code> 和 <code>Order By</code></h4><p>基本格式：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">[</span>聚合函数<span class="token punctuation">]</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 查询条件<span class="token punctuation">]</span>　<span class="token punctuation">[</span><span class="token keyword">group</span> <span class="token keyword">by</span> 字段名<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">order</span> <span class="token keyword">by</span> 字段名 排序方向<span class="token punctuation">]</span></code></pre><p>Tips：若分组字段和排序字段一样时，可不需要<code>order by</code>关键字，则只需告知排序方向。</p><h4 id="COUNT-函数基本使用"><a href="#COUNT-函数基本使用" class="headerlink" title="COUNT()函数基本使用"></a>COUNT()函数基本使用</h4><p><code>COUNT()</code>函数是用来统计记录的总条数。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">/</span>字段名<span class="token punctuation">)</span> <span class="token keyword">from</span> 数据表<span class="token punctuation">;</span></code></pre><h4 id="SUM-函数基本使用"><a href="#SUM-函数基本使用" class="headerlink" title="SUM()函数基本使用"></a>SUM()函数基本使用</h4><p><code>SUM()</code>函数是对数据表的某列进行求和操作。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">from</span> 数据表<span class="token punctuation">;</span></code></pre><h4 id="AVG-函数基本使用"><a href="#AVG-函数基本使用" class="headerlink" title="AVG()函数基本使用"></a>AVG()函数基本使用</h4><p><code>AVG()</code>函数是对数据表的某列进行求平均值操作。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">from</span> 数据表<span class="token punctuation">;</span></code></pre><h4 id="MAX-函数基本使用"><a href="#MAX-函数基本使用" class="headerlink" title="MAX()函数基本使用"></a>MAX()函数基本使用</h4><p><code>MAX()</code>函数是求某列的最大数值。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">from</span> 数据表<span class="token punctuation">;</span></code></pre><h4 id="MIN-函数基本使用"><a href="#MIN-函数基本使用" class="headerlink" title="MIN()函数基本使用"></a><code>MIN()</code>函数基本使用</h4><p><code>MIN()</code>函数是求某列的最小数值。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">from</span> 数据表</code></pre><h4 id="视图的定义"><a href="#视图的定义" class="headerlink" title="视图的定义"></a>视图的定义</h4><p>视图（<code>view</code>）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。通过视图，可以展现基表（用来创建视图的表）的部分数据；视图数据来自定义视图的查询表。</p><p>我们知道了视图的定义，那么，为什么要使用它呢？</p><p>因为视图有如下优点：</p><p>①. 简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集；</p><p>②. 安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行或列，但是通过视图就可以简单的实现；</p><p>③. 数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列队视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</p><p>总而言之，使用视图的大部分情况是为了<strong>保障数据安全性，提高查询效率</strong>。</p><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ALGORITHM</span> <span class="token operator">=</span> &#123;<span class="token keyword">UNDEFINED</span> <span class="token operator">|</span> <span class="token keyword">MERGE</span> <span class="token operator">|</span> <span class="token keyword">TEMPTABLE</span>&#125;<span class="token punctuation">]</span>    <span class="token keyword">VIEW</span> view_name <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">AS</span> select_statement   <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span></code></pre><p>参数说明：</p><ul><li><code>OR REPLACE</code>：表示替换已有视图；</li><li><code>ALGORITHM</code>：表示视图选择算法，默认算法是<code>UNDEFINED</code>(未定义的)： <code>MySQL</code> 自动选择要使用的算法 ；<code>merge</code>合并；<code>temptable</code>临时表；</li><li><code>column_list</code>：可选参数，指定视图中各个属性的名词，默认情况下与<code>select</code>语句中查询的属性相同；</li><li><code>select_statement</code>：表示<code>select</code>语句；</li><li><code>[WITH [CASCADED | LOCAL] CHECK OPTION]</code>：表示视图在更新时保证在视图的权限范围之内；<code>cascade</code>是默认值，表示更新视图的时候，要满足视图和表的相关条件；<code>local</code>表示更新视图的时候，要满足该视图定义的一个条件即可。</li></ul><p>在实际开发中，用户可以根据自己的需求，通过视图的方式，获取基本表中自己需要的数据，这样既能满足用户的需求，也不会破坏基本表原来的结构，从而保证了基本表中数据的安全性。</p><h4 id="操作视图"><a href="#操作视图" class="headerlink" title="操作视图"></a>操作视图</h4><p>视图是逻辑表，也就是说视图不是真实的表，但操作视图和操作普通表的语法是一样的。</p><p>用户可以在视图中无条件地使用<code>select</code>语句查询数据。但使用<code>insert</code>、<code>update</code>和<code>delete</code>操作需要<strong>在创建视图时</strong>满足以下条件（满足以下条件的视图称为<strong>可更新视图</strong>）：</p><ul><li><code>from</code>子句中只能引用有<code>1</code>个表（真实表或可更新视图）；</li><li>不能包含 <code>with</code>、<code>distinct</code>、<code>group by</code>、<code>having</code>、<code>limit</code>等子句；</li><li>不能使用复合查询，即不能使用<code>union</code>、<code>intersect</code>、<code>except</code>等集合操作；</li><li><code>select</code>子句的字段列表不能包含聚合、窗口函数、集合返回函数。</li></ul><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p>若视图不再被需要，我们可以将其删除，且视图的删除并不影响源表中的数据。</p><p>删除视图的 SQL 如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> view_name<span class="token punctuation">;</span></code></pre><h4 id="存储过程的定义"><a href="#存储过程的定义" class="headerlink" title="存储过程的定义"></a>存储过程的定义</h4><p><strong>存储过程</strong>（<code>Stored Procedure</code>）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。</p><p>存储过程是为了完成特定功能的 <code>SQL</code> 语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数（需要时）来调用执行。</p><p>存储过程思想上很简单，就是数据库 <code>SQL</code> 语言层面的代码<strong>封装与重用</strong>。</p><p>简单的说存储过程就是具有名字的一段代码，用来完成一个特定的功能。</p><h4 id="存储过程的创建和查询"><a href="#存储过程的创建和查询" class="headerlink" title="存储过程的创建和查询"></a>存储过程的创建和查询</h4><p>创建存储过程：<code>create procedure 存储过程名(参数) </code></p><ul><li>下面我们来创建第一个存储过程</li></ul><p>每个存储的程序都包含一个由 <code>SQL</code> 语句组成的主体。此语句可能是由以分号（<code>;</code>）字符分隔的多个语句组成的复合语句。例如：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> proc1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>在命令行客户端中，如果有一行命令以分号结束，那么回车后，<code>MySQL</code> 将会执行该命令，但在创建存储过程中我们并不希望 <code>MySQL</code> 这么做。</p><p><code>MySQL</code> 本身将分号识别为语句分隔符，因此必须临时重新定义分隔符以使 MySQL 将整个存储的程序定义传递给服务器。</p><p>要重新定义 <code>MySQL</code> 分隔符，请使用该 <code>delimiter</code>命令。使用 <code>delimiter</code> 首先将结束符定义为<code>//</code>，完成创建存储过程后，使用<code>//</code>表示结束，然后将分隔符重新设置为分号（<code>;</code>）：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token comment">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> proc1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token comment">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><p>注意：<code>/</code>也可以换成其他符号，例如<code>$</code>;</p><ul><li><p>执行存储过程：<code>call 存储过程名</code></p></li><li><p>创建带有参数的存储过程 存储过程的参数有三种：</p><ul><li><code>IN</code>：输入参数，也是默认模式，表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回；</li><li><code>OUT</code>：输出参数，该值可在存储过程内部被改变，并可返回；</li><li><code>INOUT</code>：输入输出参数，调用时指定，并且可被改变和返回。</li></ul></li></ul><h5 id="存储过程的查询和删除"><a href="#存储过程的查询和删除" class="headerlink" title="存储过程的查询和删除"></a>存储过程的查询和删除</h5><p>我们如何在数据库中查询我们已经创建过的存储过程呢：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">STATUS</span> <span class="token keyword">WHERE</span> db<span class="token operator">=</span><span class="token string">'数据库名'</span><span class="token punctuation">;</span></code></pre><p>查看存储过程的详细定义信息：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 数据库<span class="token punctuation">.</span>存储过程名<span class="token punctuation">;</span></code></pre><p>当我们不再需要某个存储过程时，我们可以使用：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名<span class="token punctuation">.</span>存储过程名<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的学习笔记(三)</title>
      <link href="/posts/91d93a2e/"/>
      <url>/posts/91d93a2e/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 本篇是数据库的学习笔记，仅供自己学习使用。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h3 id="数据库和表的基本操作（三）"><a href="#数据库和表的基本操作（三）" class="headerlink" title="数据库和表的基本操作（三）"></a>数据库和表的基本操作（三）</h3><h4 id="带-LIKE-的字符匹配查询"><a href="#带-LIKE-的字符匹配查询" class="headerlink" title="带 LIKE 的字符匹配查询"></a>带 LIKE 的字符匹配查询</h4><p>在前面的检所操作中，我们讲述了如何进行比较查询或者是范围查询，但如果我们想查找所有包含字符<code>ir</code>的内容该么办呢？用之前的方法好像行不通了。在这里，我们需要用通配符进行匹配查找。而执行匹配查找的关键字就是<code>LIKE</code>。 <code>SQL</code>语句支持很多种通配符，其中可以和<code>LIKE</code>一起搭配使用的就是通配符<code>%</code>和<code>_</code>了。</p><h4 id="使用通配符-模糊匹配数据内容"><a href="#使用通配符-模糊匹配数据内容" class="headerlink" title="使用通配符%模糊匹配数据内容"></a>使用通配符<code>%</code>模糊匹配数据内容</h4><p>百分号通配符<code>%</code>可以匹配任意长度的字符，甚至包括零字符。</p><p>语法规则为：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 字段名 <span class="token operator">LIKE</span> <span class="token string">'字符%'</span><span class="token punctuation">;</span>  <span class="token comment">//其中 % 的位置可以根据需要在字符间变化</span></code></pre><p><img src="http://cdn.zengchen233.cn/img/202112201854701.png" alt="image-20210630215115250" loading="lazy"></p><p>我们将使用<code>LIKE</code>关键字和通配符<code>%</code>检索出所有商品名称带<code>ir</code>的商品信息。</p><p>查询代码如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> Mall_products<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'%ir%'</span><span class="token punctuation">;</span></code></pre><p>分析：</p><p>该语句查询的结果返回所有商品的名字中间带<code>ir</code>字符的所有信息。通配符<code>%</code>告诉<code>MySQL</code>，返回字符串中间带<code>ir</code>字符的记录，不管<code>ir</code>前面和后面分别有多少字符。通配符<code>%</code>可以放在不同的位置以满足你查询的需要.</p><h4 id="使用通配符-模糊匹配数据内容-1"><a href="#使用通配符-模糊匹配数据内容-1" class="headerlink" title="使用通配符_模糊匹配数据内容"></a>使用通配符<code>_</code>模糊匹配数据内容</h4><p>下划线通配符<code>_</code>与百分号通配符<code>%</code>类似，也用于模糊匹配。但是区别在于下划线通配符<code>_</code>只能模糊匹配<code>1个</code>字符。如果你执意想用下划线通配符<code>_</code>匹配多个字符，那只能多用几个<code>_</code>咯！</p><p>语法规则为： </p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 字段名 <span class="token operator">LIKE</span> <span class="token string">'字符_'</span><span class="token punctuation">;</span> <span class="token comment">//其中`_`的位置可以根据需要在字符间变化</span></code></pre><p>举个例子 假设我们现在有一张表<code>Mall_products</code>，内容如下：</p><p><img src="http://cdn.zengchen233.cn/img/202112201854416.png" alt="image-20210706105126400" loading="lazy"></p><p>我们将使用<code>LIKE</code>关键字和通配符<code>_</code>检索出所有商品名称以<code>r</code>结尾，且前边有9个字母的商品信息。</p><p>查询代码如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> Mall_products<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'_________r'</span><span class="token punctuation">;</span></code></pre><h4 id="查询空值"><a href="#查询空值" class="headerlink" title="查询空值"></a>查询空值</h4><p>在数据表创建之初，创建者可以指定某个字段是否为空值<code>NULL</code>。注意了，这个<code>NULL</code>既不代表<code>0</code>，也不代表空字符，而是代表一种未知的状态，比如不适用或者放着等将来有合适数据了再添加进去。</p><p>语法规则为：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 字段名 <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> </code></pre><h4 id="去除重复结果"><a href="#去除重复结果" class="headerlink" title="去除重复结果"></a>去除重复结果</h4><p>有的时候，出于对数据分析的要求，分析人员需要消除数据表中重复的数据，那么如何消除呢？别担心，<code>SQL</code>语句也贴心的为你准备好了消除重复数据的关键字<code>DISTINCT</code>。</p><p>语法规则为：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 字段名 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span> </code></pre><h4 id="带AND关键字的多条件查询"><a href="#带AND关键字的多条件查询" class="headerlink" title="带AND关键字的多条件查询"></a>带<code>AND</code>关键字的多条件查询</h4><p>大家在前两章使用<code>WHERE</code>关键字限定查询内容的时候，有没有注意到我们使用的都是单一条件查询。有没有同学曾经在检索的时候觉得力不从心：“我需要的结果只用单一条件查询是得不到的呀！”</p><p>比如，我既想要成熟苹果中直径大于<code>5cm</code>的苹果的品种，又想要成熟苹果果色为黄色的苹果的品种。这两个条件如何综合在一起进行检索呢？</p><p><code>MySQL</code>在<code>WHERE</code>子句中使用<code>AND</code>操作符限制只有满足所有条件的查询才会被返回。可以使用<code>AND</code>连接两个甚至更多个查询条件，多个条件表达式之间用<code>AND</code>分开。</p><p>语法规则为：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 表达式<span class="token number">1</span> <span class="token operator">AND</span> 表达式<span class="token number">2</span><span class="token punctuation">;</span></code></pre><div class="warning">小提示： 可以同时添加多个过滤条件，增加条件的同时只需增加一个 AND 关键字。</div><h4 id="带OR关键字的多条件查询"><a href="#带OR关键字的多条件查询" class="headerlink" title="带OR关键字的多条件查询"></a>带<code>OR</code>关键字的多条件查询</h4><p>与<code>AND</code>相反，在<code>WHERE</code>声明中使用<code>OR</code>关键字表示只需满足两个条件中的其中一个条件即可返回结果。</p><p>语法规则为：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 表达式<span class="token number">1</span> <span class="token operator">OR</span> 表达式<span class="token number">2</span><span class="token punctuation">;</span> </code></pre><div class="warning"><p>   小提示： OR 可以和 AND 一起使用。但是 AND 的优先级要高于 OR 的优先级！ </p></div><h4 id="对查询结果排序"><a href="#对查询结果排序" class="headerlink" title="对查询结果排序"></a>对查询结果排序</h4><p>我们知道在<code>MySQL</code>中从数据表中读取数据都是使用<code>SELECT</code>语句。 如果我们需要对读取的语句进行排序，我们就可以使用<code>Order By</code>子句来设定你想要按照的字段进行排序并返回结果。</p><p>语法：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段名 <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token punctuation">[</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>你还可以根据自己的需求添加<code>WHERE</code>、<code>LIKE</code>子句来设置条件，再对结果过进行排序显示。</p><h4 id="指定排序方向"><a href="#指定排序方向" class="headerlink" title="指定排序方向"></a>指定排序方向</h4><p>从上面的查询语句中我们并未看到有任何表示<strong>排序方向</strong>的关键字，在默认情况下，它是按<strong>升序</strong>排列的。</p><ul><li><code>ASC</code> 升序关键字</li><li><code>DESC</code> 降序关键字</li></ul><h4 id="分组查询的单独使用"><a href="#分组查询的单独使用" class="headerlink" title="分组查询的单独使用"></a>分组查询的单独使用</h4><p>分组查询的关键字是<code>Group By</code>，查询的是每个分组中 <strong>首次出现的一条记录</strong>。</p><p>语法：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 字段名<span class="token punctuation">;</span></code></pre><p>一般情况下，<code>GROUP BY</code>都和聚合函数一起使用。</p><h4 id="LIMIT的使用"><a href="#LIMIT的使用" class="headerlink" title="LIMIT的使用"></a><code>LIMIT</code>的使用</h4><p>在我们查询大量数据结果时，会返回很多条数据，有需要的记录可能就其中的一条或者几条。比如，实现分页功能，若每页显示<code>10</code>条记录，每次查询就只需要<code>10</code>条记录。 在<code>MySQL</code>中，提供了<code>LIMIT</code>关键字，用来限制查询结果的数量。</p><p>语法：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token punctuation">[</span><span class="token keyword">OFFSET</span><span class="token punctuation">,</span><span class="token punctuation">]</span> 记录数<span class="token punctuation">;</span></code></pre><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>子查询是指出现在其他<code>SQL</code>语句内的<code>SELECT</code>子句。</p><p>例如：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> col1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> col2 <span class="token keyword">FROM</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>子查询指嵌套在查询内部，且必须始终出现在圆括号内，子查询可以分为四类：</p><ul><li>标量子查询：返回单一值的标量，最简单的形式；</li><li>列子查询：返回的结果集是 <code>N</code> 行一列；</li><li>行子查询：返回的结果集是一行 <code>N</code> 列；</li><li>表子查询：返回的结果集是 <code>N</code> 行 <code>N</code> 列。</li></ul><h4 id="关键字子查询"><a href="#关键字子查询" class="headerlink" title="关键字子查询"></a>关键字子查询</h4><h5 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h5><p>由于列子查询返回的结果集是 <code>N</code> 行一列，因此不能直接使用 <code>=</code> 、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>&lt;&gt;</code>这些比较标量结果的操作符。在列子查询中可以使用 <code>ALL</code>、<code>ANY</code>、<code>SOME</code> 和 <code>IN</code>关键字操作符。</p><p>为了完成本关任务，你需要掌握：如何在子查询中使用关键字进行查询。</p><h5 id="ALL关键字"><a href="#ALL关键字" class="headerlink" title="ALL关键字"></a><code>ALL</code>关键字</h5><p><code>ALL</code>必须接在一个比较运算符的后面，表示与子查询返回的<strong>所有值</strong>比较都为 <code>TRUE</code>则返回<code>TRUE</code>。</p><h5 id="ANY和SOME关键字"><a href="#ANY和SOME关键字" class="headerlink" title="ANY和SOME关键字"></a><code>ANY</code>和<code>SOME</code>关键字</h5><p><code>ANY</code>与比较操作符联合使用，表示与子查询返回的<strong>任何值</strong>比较为<code>TRUE </code>，则返回<code>TRUE</code>。 <code>SOME</code>是<code>ANY</code>的别名，一般用的比较少。</p><h5 id="IN关键字"><a href="#IN关键字" class="headerlink" title="IN关键字"></a><code>IN</code>关键字</h5><ul><li><code>IN</code>的意思就是指定的一个值是否在这个集合中，如果在就返回<code>TRUE</code>；否则就返回<code>FALSE</code>了，同<code>IN</code>(项<code>1</code>，项<code>2</code>，…)；</li><li><code>IN</code> 是 <code>= ANY</code> 的别名，二者相同，但 <code>NOT IN</code> 的别名却不是 <code>&lt;&gt; ANY</code> 而是 <code>&lt;&gt; SOME</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器nginx上部署SSL证书实现https访问</title>
      <link href="/posts/ced5124b/"/>
      <url>/posts/ced5124b/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 在远程服务器上部署了 <code>Hexo</code> 之后，设置部署 <code>https</code> 证书（<code>SSL</code>），记录申请证书、配置相关 <code>nginx</code> 服务，远程服务器为 <code>Ubuntu 20.04</code>。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>自己的阿里云主机相关环境：</p><ul><li><code>Ubuntu 20.04</code></li><li><code>nginx version: nginx/1.18.0 (Ubuntu)</code></li></ul><h2 id="申请-SSL"><a href="#申请-SSL" class="headerlink" title="申请 SSL"></a>申请 SSL</h2><p>可以打开阿里云官网搜索<code>SSL</code>,左侧选择 <strong>“SSL 证书-证书资源包”</strong> 里面购买免费的 <code>SSL</code> 证书资源包，一年最多 20 个，每个时间为一年；</p><p><img src="http://cdn.zengchen233.cn/img/202112201856652.png" loading="lazy"></p><p>点击证书申请，在 <strong>“状态”</strong> 一栏 按照如下步骤，依次填写对应的，其中设置解析记录选择自动即可：</p><p><img src="http://cdn.zengchen233.cn/img/202112201856343.png" loading="lazy"></p><p>当到最后一步骤（此时 <strong>“状态”</strong> 一栏也会变成“已签发”）。</p><p><img src="http://cdn.zengchen233.cn/img/202112201856088.png" loading="lazy"></p><p>点击下载对应的 <code>nginx</code> 的证书，下载后解压会得到两个文件 ：</p><p><img src="http://cdn.zengchen233.cn/img/202112201856852.png" loading="lazy"></p><p>点击下载对应的 nginx 的证书，下载后解压会得到两个文件 <code>5568236_zengchen233.cn.key</code>和<code>5568236_zengchen233.cn.pem</code>；</p><h2 id="部署-SSL"><a href="#部署-SSL" class="headerlink" title="部署 SSL"></a>部署 SSL</h2><h3 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h3><p>通过 <code>winscp</code> 将上面证书的的两个文件上传到远程服务器的家目录下；然后登陆到远程服务器，将证书文件移动到 <code>/usr/share/nginx/cert</code> 路径下，注意不是 <code>/etc/nginx/nginx.conf</code> 路径；直接 scp 到此目标路径下，会报权限拒绝，故此周转一下。</p><pre class="language-shell" data-language="shell"><code class="language-shell">登陆到远程服务器，创建好 cert/文件夹<span class="token function">sudo</span> <span class="token function">mv</span> 5568236_zengchen233.cn.* /usr/share/nginx/cert/</code></pre><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><p>修改 <code>nginx</code> 配置文件，修改之前先记得备份</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/default.backup<span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-available/default</code></pre><p>找到如下地方，</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># Default server configuration</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span> default_server</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">listen</span> [::]:80 default_server</span><span class="token punctuation">;</span></code></pre><p>将其修改为：将原先的一个 server 拆分为两个 server；<code>listen 80</code> 表示 http 协议，访问会 return ；强制改为跳转为 https: 协议访问（<code>listen 443</code>）；不然就会可同时访问 http 和 https 两个，而默认浏览器输入 <code>zengchen233.cn</code> 顶级域名，默认是选择 http 这个，会有警告小锁提示。</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># Default server configuration</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span> default_server</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span> [::]:80 default_server</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span> zengchen233.cn</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>        <span class="token comment"># SSL configuration</span>        <span class="token comment">#</span>        <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl default_server</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span> [::]:443 ssl default_server</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">ssl_certificate</span>      /usr/share/nginx/cert/5568236_zengchen233.cn.pem</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">ssl_certificate_key</span>  /usr/share/nginx/cert/5568236_zengchen233.cn.key</span><span class="token punctuation">;</span></code></pre><h3 id="检测配置-nginx-成功"><a href="#检测配置-nginx-成功" class="headerlink" title="检测配置 nginx 成功"></a>检测配置 nginx 成功</h3><p>执行命令，检测配置 <code>nginx</code> 是否正确，</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> nginx -t</code></pre><p>配置成功也会输出如下</p><pre class="language-shell" data-language="shell"><code class="language-shell">nginx: the configuration <span class="token function">file</span> /etc/nginx/nginx.conf syntax is oknginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token builtin class-name">test</span> is successful</code></pre><p>重启<code>nginx</code>服务后（也可重启服务器），</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">sudo service nginx reload (重载)sudo systemctl restart nginx (重启)</code></pre><h3 id="访问成功"><a href="#访问成功" class="headerlink" title="访问成功"></a>访问成功</h3><p>再次在 <code>chrome</code> 中输入域名；即可看到安装的小锁，开启 https 访问成功。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>若是遇到中途遇到页面访问报错如下：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">400 Bad RequestThe plain HTTP request was sent to HTTPS portnginx/1.18.0 (Ubuntu)</code></pre><p>则通常是将配置下面两行的时候，多加了一行 <code>ssl on;</code>，将其删掉、或注释掉、或者改写为 <code>ssl off;</code> 即可:</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">ssl</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">ssl_certificate</span>      /usr/share/nginx/cert/5568236_zengchen233.cn.pem</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">ssl_certificate_key</span>  /usr/share/nginx/cert/5568236_zengchen233.cn.key</span><span class="token punctuation">;</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zengchen233.cn/posts/7d014710/">在阿里云服务器上部署Hexo博客 </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的学习笔记(二)</title>
      <link href="/posts/ef2a1a05/"/>
      <url>/posts/ef2a1a05/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 本篇是数据库的学习笔记，仅供自己学习使用。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h4 id="数据库和表的基本操作（二）"><a href="#数据库和表的基本操作（二）" class="headerlink" title="数据库和表的基本操作（二）"></a>数据库和表的基本操作（二）</h4><h5 id="为表的所有字段插入数据"><a href="#为表的所有字段插入数据" class="headerlink" title="为表的所有字段插入数据"></a>为表的<u>所有</u>字段插入数据</h5><p>向表中插入数据最简单的方法就是使用<code>INSERT</code>语句。<code>INSERT</code>语句需要你声明要插入内容的表<code>(table)</code>名和内容<code>(values)</code>。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO 表名 (字段名) VALUES (内容);</code></pre><p><code>分析:</code>在插入数据时，我们指定了所有的字段名，这样的好处是：即使我们打乱了原本字段的排列顺序，只要插入的数据与之匹配，插入都不会出错。其实，还有一种偷懒的办法，就是我们可以不填字段名，但是这样的话，就必须老老实实的按字段顺序来填入相应的数据。</p><h5 id="为表的指定字段插入数据"><a href="#为表的指定字段插入数据" class="headerlink" title="为表的指定字段插入数据"></a>为表的<u>指定</u>字段插入数据</h5><p>有的时候，我们并不想往某个字段内插入完完整整的值，或者说，有的时候我们并没有完整的数据可以整整齐齐插入某个字段。这时候就需要我们只为指定好的字段插入数据了，其他的我们都不用管。换句话说，就是： 为表的指定字段插入数据，就是在<code>INSERT</code>中只向部分插入值，而其他字段的值为表定义时的默认值。</p><blockquote><p>如果我们建表时给字段设置的默认值为<code>Null</code>，所以插入数据时忽略该字段，就会默认给它赋值为空。</p></blockquote><h5 id="为表同时插入多条记录"><a href="#为表同时插入多条记录" class="headerlink" title="为表同时插入多条记录"></a>为表同时插入多条记录</h5><p>当然，一条一条插入数据很繁琐，有没有“打包”的方法呀？有，还有一种方法能同时让我们插入好几条数据。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO 表名 (字段名) VALUES (内容1), (内容2), (内容3);</code></pre><h5 id="更新表中指定的内容"><a href="#更新表中指定的内容" class="headerlink" title="更新表中指定的内容"></a>更新表中指定的内容</h5><p>通过上一关的学习，我们已经掌握了<code>INSERT</code>操作！同样，<code>UPDATE</code>操作也很简单，只要记住<code>UPDATE</code>语句三要素就能轻松掌握，它们分别是:</p><ul><li>需要更新的<code>表（table）名</code>；</li><li>需要更新的<code>字段（column）名</code>和它的<code>新内容（value）</code>；</li><li>决定更新<code>哪一条内容（value）</code>的<code>过滤条件</code>。</li></ul><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">UPDATE 表名 SET 字段名1 &#x3D; 内容1, 字段名2 &#x3D; 内容2, 字段名3 &#x3D; 内容3 WHERE 过滤条件;</code></pre><h5 id="删除表中的指定行"><a href="#删除表中的指定行" class="headerlink" title="删除表中的指定行"></a>删除表中的指定行</h5><p>从数据表中删除数据内容需要使用<code>DELETE</code>语句，它需要<code>WHERE</code>语句来配合它来指定我们究竟应该删除哪些数据内容。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM 表名 WHERE 条件语句; </code></pre><h5 id="删除表中的所有行"><a href="#删除表中的所有行" class="headerlink" title="删除表中的所有行"></a>删除表中的所有行</h5><p>删除表中的所有行就更简单了。如果需要删除表中所有的行，只需要省略<code>WHERE</code>语句即可。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM 表名; </code></pre><div class="warning"><blockquote><p>小提示： TRUNCATE TABLE 语句也可以用来删除表中的所有记录。但是与 DELETE 不同的是，TRUNCATE TABLE 语句直接删除的是表，而不是表中的内容，删除结束后还会重新创建一个表。所以它的执行速度会比 DELETE 语句快。 语法为：<code>TRUNCATE TABLE 表名;</code></p></blockquote></div><h5 id="查询数据表中指定字段的内容"><a href="#查询数据表中指定字段的内容" class="headerlink" title="查询数据表中指定字段的内容"></a>查询数据表中指定字段的内容</h5><p><code>MySQL</code>从数据表中查询数据的基本语句为<code>SELECT</code>语句。</p><p><code>SELECT</code>语句的可选参数比较多，让我们先从最简单的开始，带大家一步一步的深入<code>SELECT</code>语句的使用。</p><p>SELECT 基本语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名 FROM 表名; </code></pre><p>分析：</p><p>我们查询数据的时候，往往需要同时查询<code>多个字段</code>下的内容。这时，我们只需要在<code>字段之间</code>加入逗号<code>,</code>即可。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名1, 字段名2 FROM 表名; </code></pre><div class="warning"><blockquote><p>小提示： MySQL 中的 SQL 语句对关键字的大小写不敏感， SELECT 和 select 是一样的。 但是许多开发者更喜欢将关键字大写，表名和字段名使用小写，养成这种习惯，以后写出来的脚本就更容易阅读和维护了。</p></blockquote></div><h5 id="查询数据表中的所有内容"><a href="#查询数据表中的所有内容" class="headerlink" title="查询数据表中的所有内容"></a>查询数据表中的所有内容</h5><p>如果我们不记得字段名字了，我们还可以查看整张表的内容。这时候，只需要我们用星号<code>*</code>来代替字段的名字，就会得到一整张表的内容。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM 表名;</code></pre><div class="warning"><blockquote><p>小提示： 虽然使用星号 * 看起来是一件很方便的事情，但是建议大家在不想获取整张表的情况下，还是使用字段名来进行查询。因为很显然，它会降低查询的效率。</p></blockquote></div><h5 id="带IN关键字的查询"><a href="#带IN关键字的查询" class="headerlink" title="带IN关键字的查询"></a>带<code>IN</code>关键字的查询</h5><p><code>IN</code>关键字被用在<code>WHERE</code>语句的后边，用来过滤你所需要查询的内容。更形象的说，<code>IN</code>关键字的使用情形就像点名，点到谁谁就要站出来。</p><p>语法规则为： </p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名 FROM 表名 WHERE 字段名 IN (n1,n2,n3,...);</code></pre><p>其中，括号内的数字必须为<code>INT</code>格式的数字。被“点到名”的这些括号里数字对应的内容，都要乖乖的站到前边来展示给大家看。</p><h5 id="带NOT-IN关键字的查询"><a href="#带NOT-IN关键字的查询" class="headerlink" title="带NOT IN关键字的查询"></a>带<code>NOT IN</code>关键字的查询</h5><p>聪明的小伙伴一看<code>NOT</code>就知道了，我们是要取反了。刚才我们是在查询括号中出现的内容，加了<code>NOT</code>取反后，就意味着，我们要查询的是除了括号中出现内容外的所有内容。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名 FROM 表名 WHERE 字段名 NOT IN (n1,n2,n3,...); </code></pre><h5 id="带BETWEEN-AND关键字的查询"><a href="#带BETWEEN-AND关键字的查询" class="headerlink" title="带BETWEEN AND关键字的查询"></a>带<code>BETWEEN AND</code>关键字的查询</h5><p>我们已经学会了如何用<code>IN</code>关键字精确查询数据表中的内容，但是在很多时候，我们仅仅是想知道在某一范围内有多少符合条件的数据，这就不得不使用到关键字<code>BETWEEN AND</code>了。</p><p><code>BETWEEN AND</code>需要两个参数支持，一个是范围的开始值，另一个就是结束值了。如果字段值满足指定的范围查询条件，就返回这些满足条件的数据内容。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名 FROM 表名 WHERE 字段名 BETWEEN n1 AND n2; </code></pre><h5 id="带NOT-BETWEEN-AND关键字的查询"><a href="#带NOT-BETWEEN-AND关键字的查询" class="headerlink" title="带NOT BETWEEN AND关键字的查询"></a>带<code>NOT BETWEEN AND</code>关键字的查询</h5><p>像上一关介绍的关键字<code>IN</code>一样，我们还可以对关键字<code>BETWEEN AND</code>进行取反，表示查询指定范围之外的值。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名 FROM 表名 WHERE 字段名 NOT BETWEEN n1 AND n2; </code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql的学习笔记(一)</title>
      <link href="/posts/c30254d7/"/>
      <url>/posts/c30254d7/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 本篇是数据库的学习笔记，仅供自己学习使用。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h4 id="数据库和表的基本操作（一）"><a href="#数据库和表的基本操作（一）" class="headerlink" title="数据库和表的基本操作（一）"></a><strong>数据库和表的基本操作（一）</strong></h4><h5 id="如何在指定数据库中创建表"><a href="#如何在指定数据库中创建表" class="headerlink" title="如何在指定数据库中创建表"></a>如何在指定数据库中创建表</h5><p>我们先来了解一下在数据库中创建表的规则：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名(    字段名 数据类型,    字段名 数据类型,       .....);</code></pre><p>实例如下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_user(    id INT,    username VARCHAR(32),    password VARCHAR(32),    phone VARCHAR(11));</code></pre><h5 id="查看表的基本结构，用来验证是否创建成功是再好不过啦。"><a href="#查看表的基本结构，用来验证是否创建成功是再好不过啦。" class="headerlink" title="查看表的基本结构，用来验证是否创建成功是再好不过啦。"></a><strong>查看表的基本结构</strong>，用来验证是否创建成功是再好不过啦。</h5><p>语法如下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">DESCRIBE 表名;</code></pre><p>简写：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">DESC 表名;</code></pre><h5 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h5><p>有两种方式可以添加主键约束： 1.在定义列的同时指定主键； 2.在定义完字段之后再指定主键。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_user(    id INT primary key,    username VARCHAR(32),    password VARCHAR(32),    phone VARCHAR(11));</code></pre><h5 id="给表添加外部关键字"><a href="#给表添加外部关键字" class="headerlink" title="给表添加外部关键字"></a>给表添加外部关键字</h5><p>在<code>MySQL</code>中给表中字段添加外键约束的语法规则如下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CONSTRAINT 外键名 FOREIGN KEY 字段名 REFERENCES 主表名(主键名)</code></pre><p>我们来创建两张表，并给员工表<code>(t_emp)</code>添加外键：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_dept(    deptId INT PRIMARY KEY,    name VARCHAR(22),    location VARCHAR(50));CREATE TABLE t_emp(    id INT PRIMARY KEY,    name VARCHAR(22),    deptId INT,    CONSTRAINT fk_emp_dept1 FOREIGN KEY(deptId) REFERENCES t_dept(deptId));</code></pre><h5 id="添加常用约束"><a href="#添加常用约束" class="headerlink" title="添加常用约束"></a>添加常用约束</h5><h5 id="怎么添加唯一约束"><a href="#怎么添加唯一约束" class="headerlink" title="怎么添加唯一约束"></a>怎么添加唯一约束</h5><p>唯一约束<code>（Unique Constraint）</code>要求该列唯一，允许为空，但是只能有一个空值。唯一约束可以确保一列或者几列不出现重复值。</p><p>定义部门表的部门名称唯一，<code>SQL</code>语句如下：关键词 <code>UNIQUE</code>。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_dept(    id INT PRIMARY KEY,    name VARCHAR(22) UNIQUE,    location VARCHAR(50))</code></pre><h5 id="怎么添加非空约束"><a href="#怎么添加非空约束" class="headerlink" title="怎么添加非空约束"></a>怎么添加非空约束</h5><p>关键词：<code>NOT NULL</code>；</p><p>例如：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_emp(    id INT PRIMARY KEY,    name VARCHAR(22),    sex VARCHAR(2) DEFAULT &#39;男&#39;) DEFAULT CHARSET&#x3D;utf8;</code></pre><p>注意：</p><ul><li>如果是添加字符串型默认值要使用单引号，如果是整型则不需要加任何符号；</li><li>如果要添加的是中文默认值，则需要加上<code>DEFAULT CHARSET=utf8;</code>使用英文字符则不需要。</li></ul><h5 id="设置表的属性值自动增加"><a href="#设置表的属性值自动增加" class="headerlink" title="设置表的属性值自动增加"></a>设置表的属性值自动增加</h5><p>在数据库应用中，经常有个需求就是，在每次插入新纪录时，系统<strong>自动生成</strong>字段的主键值，即：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_tmp(    id int PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(32))</code></pre><p>关键词：<code>AUTO_INCREMENT</code>，默认情况下初始值和增量都为<code>1</code>。</p><h5 id="删除数据库中的表"><a href="#删除数据库中的表" class="headerlink" title="删除数据库中的表"></a>删除数据库中的表</h5><p>如果你想删掉表重新创建，你可以使用如下语句删除表。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">DROP TABLE 表名;</code></pre><h5 id="查看数据表基本结构"><a href="#查看数据表基本结构" class="headerlink" title="查看数据表基本结构"></a>查看数据表基本结构</h5><p>有强迫症或健忘症的小伙伴们在建好数据库和表以后，通常会怀疑自己刚才是不是敲错了，怎么办？如果不是使用图形界面是不是就没法查看啦？</p><p>不存在的，这就告诉你查看口令：<code>DESCRIBE</code> 语法规则为:<code>DESCRIBE 表名；</code></p><p><code>DESCRIBE</code>可以查看表的字段信息，包括：字段名、字段数据类型、是否为主键、是否有默认值等。</p><p>用<code>DESCRIBE</code>查表的结构是这样的。</p><p>其中，该结构中各个字段的含义分别为：</p><ul><li><code>NULL</code>：表示该列是否能存储 <code>NULL</code> 值；</li><li><code>Key</code>：表示该列是否已编制索引；</li><li><code>PRI</code>：表示该列是此表主键的一部分；</li><li><code>UNI</code>：表示该列是 <code>UNIQUE</code> 索引的一部分；</li><li><code>MUL</code>：表示在列中某个给定值允许出现多次；</li><li><code>Default</code>：表示该列是否有默认值，如果有的话值是多少；</li><li><code>Extra</code>：表示可以获取的与给定列有关的附加信息。</li></ul><h5 id="查看数据表详细结构"><a href="#查看数据表详细结构" class="headerlink" title="查看数据表详细结构"></a>查看数据表详细结构</h5><p>什么？你发现表建错了，你想知道错在哪里了？ 那就用<code>SHOW CREATE TABLE</code>语句吧。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE TABLE 表名; </code></pre><p>再告诉大家一个小诀窍，是不是觉得返回的结果排版有点乱。我们加上<code>\G</code>后效果就会有所改善哟！</p><h5 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h5><p>随着表越来越多，有时候你会后悔之前的数据表的名字根本没有认真斟酌过，想要重新命名一下，可以做到吗？</p><p>答案是：可以！<code>MySQL</code>是通过<code>ALTER TABLE</code>语句来修改表名的。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 旧表名 RENAME 新表名; </code></pre><h5 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h5><p>有时，在我们建好一张表后会突然发现，哎呀！字段名貌似写错了！怎么办？要删了表再重新建一个新表吗？还是要删了这个字段再新建一个新的字段？ 都不用，<code>MySQL</code> 中修改字段名称也有专门的语句，接近于自然语言，很好记忆。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新数据类型; </code></pre><h5 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h5><p>随着存储的数据越来越多，数据库新人可能会发现，哎呀，当初预留的数据类型已经不能满足要求了，或者当初预留的字符太少了，怎么办？怎么修改？规则来了。</p><p>语法规则为： </p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 MODIFY 字段名 数据类型; </code></pre><h5 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h5><p>因为甲方的业务需求是不停变化的，所以在数据库操作中，添加字段可是常有的事。一个完整的字段包括：<code>字段名</code>、<code>数据类型</code>和<code>完整性约束</code>。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 ADD 新字段名 数据类型 [约束条件] [FIRST|AFTER] 已存在字段名; </code></pre><p>以下是在 <code>MySQL</code> 中常用的约束。</p><p><code>NOT NULL </code>约束：确保某列不能有 <code>NULL</code> 值。</p><p><code>DEFAULT</code> 约束：当某列没有指定值时，为该列提供默认值。</p><p><code>UNIQUE</code> 约束：确保某列中的所有值是不同的。</p><p><code>PRIMARY Key</code> 约束：唯一标识数据库表中的各行&#x2F;记录。</p><p><code>CHECK</code> 约束：<code>CHECK</code> 约束确保某列中的所有值满足一定条件。</p><h5><font color="cyan"><strong>在表的最后一列添加字段</strong></font></h5><p>只要不做<code>[FIRST|AFTER]</code>的位置说明，在添加字段时<code>MySQL</code>会默认把新字段加入到表的最后一列。</p><h5><font color="cyan"><strong>在表的第一列添加字段</strong></font></h5><p>如果我们想在第一列添加新的字段，只需做<code>FIRST</code>的位置说明。</p><h5><font color="cyan"><strong>在表的指定列后添加字段</strong></font></h5><p>如果我们想在某一列后面添加新的字段，只需做<code>AFTER</code>的位置说明，然后注明你想让它添加在哪个字段的后面即可。</p><h5 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h5><p>有添加的需求就会有删除的需求。删除一个字段就是将数据表中的某个字段从表中移除。</p><p>语法规则为:</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 DROP 字段名;</code></pre><h5 id="修改字段的排列位置"><a href="#修改字段的排列位置" class="headerlink" title="修改字段的排列位置"></a>修改字段的排列位置</h5><p>在一个数据表被创建的时候，其字段的排列顺序就已被确定了。不能变了吗？怎么可能，一锤子买卖没人敢做。</p><p>我们可以通过<code>ALTER TABLE</code>来改变表中字段的相对位置。</p><p>语法规则为：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 MODIFY 字段1 数据类型 FIRST|AFTER 字段2;</code></pre><p>其中，<code>字段1</code>指要修改位置的字段，<code>FIRST</code>与<code>AFTER 字段2</code>为可选参数。</p><h5 id="修改字段为表的第一个字段"><a href="#修改字段为表的第一个字段" class="headerlink" title="修改字段为表的第一个字段"></a>修改字段为表的第一个字段</h5><p>如果我们想把字段的位置调整到第一列，只需做<code>FIRST</code>的位置说明。</p><h5 id="修改字段到表的指定列之后"><a href="#修改字段到表的指定列之后" class="headerlink" title="修改字段到表的指定列之后"></a>修改字段到表的指定列之后</h5><p>还有一种位置调整的方法可以让你把想调整的字段放在除了第一列的任何位置。调整的时候需要做<code>AFTER 字段2</code>的位置说明。</p><h5 id="删除表的外键约束"><a href="#删除表的外键约束" class="headerlink" title="删除表的外键约束"></a>删除表的外键约束</h5><p>语法规则：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 DROP FOREIGN KEY 外键约束名; </code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关sidebar上小图标的加入</title>
      <link href="/posts/e9aa8926/"/>
      <url>/posts/e9aa8926/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 今天在用<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a>的时候就想着把上面的小图标加入到<a href="https://github.com/YunYouJun/hexo-theme-yun">Yun</a>主题上的sidebar里面加入CSDN小图标。效果可以看看我现在的侧边栏。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>一些正常的步骤在网上可以搜到，但是当时的方法已经不管用，需要更改一些步骤，现在由我来讲述：</p><p><img src="http://cdn.zengchen233.cn/img/202112201855590.png" alt="image-20210522214430218" loading="lazy"></p><p>选择添加入库,然后会在侧边栏上选择添加入库。这样在你建成的项目里面就添加了刚刚存在的图标。</p><p><img src="http://cdn.zengchen233.cn/img/202112201855686.png" alt="image-20210522214533659" loading="lazy"></p><p>就会看到这样一个页面，选择<code>Symbol</code>，点击这个链接，另存为到本地的js文件夹，选择<code>Font Class</code>然后在<code>hexo</code>的<code>theme</code>文件夹</p><p>在Yun&#x2F;_config.yml中加入以下代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"># stylesheets loaded <span class="token keyword">in</span> the <span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token literal-property property">css</span><span class="token operator">:</span>  <span class="token operator">-</span> <span class="token operator">/</span>css<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>yun<span class="token punctuation">.</span>css  <span class="token operator">-</span> <span class="token operator">/</span>css<span class="token operator">/</span>iconfont<span class="token punctuation">.</span>css# scripts loaded <span class="token keyword">in</span> the end <span class="token keyword">of</span> the <span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token literal-property property">js</span><span class="token operator">:</span>  <span class="token operator">-</span> <span class="token operator">/</span>js<span class="token operator">/</span>utils<span class="token punctuation">.</span>js  <span class="token operator">-</span> <span class="token operator">/</span>js<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>yun<span class="token punctuation">.</span>js  <span class="token operator">-</span> <span class="token operator">/</span>js<span class="token operator">/</span>iconfont<span class="token punctuation">.</span>js</code></pre><p>顺便还要在css文件加入以下代码：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.icon</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> -0.15em<span class="token punctuation">;</span>  <span class="token property">fill</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这样就可以复制<code>icon</code>的代码啦！</p><p>例如：</p><p><code>icon-Gitee</code> <code>icon-gitee</code> <code>icon-csdn1</code> <code>icon-csdn</code></p><p>这就大功告成啦！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zengchen233.cn/posts/7d014710/">在阿里云服务器上部署Hexo博客 </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客迁移新环境的详细配置</title>
      <link href="/posts/5161f3b4/"/>
      <url>/posts/5161f3b4/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 之前的电脑系统出了点问题，电脑一直连不上网，无奈之下去重装了一个系统，然后之前的<code>hexo</code>文件夹就都找不到啦，所以特地写下这个文章来记录一下，方便以后查看。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h1 id="文件夹详细配置："><a href="#文件夹详细配置：" class="headerlink" title="文件夹详细配置："></a>文件夹详细配置：</h1><pre class="language-none"><code class="language-none">在&#x2F;themes文件夹下clonegit clone -b master https:&#x2F;&#x2F;github.com&#x2F;YunYouJun&#x2F;hexo-theme-yun themes&#x2F;yun  # 后续升级使用 dev 分支npm install hexo-render-pug hexo-renderer-stylus配置 yun 主题细节npm install hexo-generator-tag  # 安装标签 tags : hexo-generator-taghexo new page tags              # 生成之后替换 ---------- 修改 source&#x2F;tags&#x2F;index.md 的 Front Matter -------------date: 2017-10-09 19:11:58comments: falsetype: tags---------- yun&#x2F;_config.yml 设置如下 ----------wordcloud:                      # 标签云（词云）  enable: true  height: 350打赏二维码：替换文本即可 reward编辑链接：替换文本即可 post_edit运行时间：替换文本即可 live_time关闭留言跳转 GitHub Issues：替换文本即可 Commentsnpm install hexo-wordcount      # 字数统计---------- yun&#x2F;_config.yml 设置如下 ----------wordcount:  enable: true  count: true  time: truenpm install hexo-generator-search --save     # 开启本地搜索---------- yun&#x2F;_config.yml 设置如下 ----------local_search:  enable: true  src: &#x2F;js&#x2F;search&#x2F;local-search.js谷歌广告：替换文本，不开启 Google Adsense 谷歌搜索：替换文本即可 google_analyticsnpm install hexo-prism-plugin  # 代码高亮---------- 💘 需要新增 💘 hexo&#x2F;_config.yml 设置如下 ----------prism_plugin:  mode: preprocess # realtime&#x2F;preprocess  theme: default  line_number: false # default falsecustom_css: &quot;path&#x2F;to&#x2F;your&#x2F;custom.css&quot; # optional顺带关闭 hexo&#x2F;_config.yml 自带的高亮  highlight:  enable: falsenpm install hexo-generator-feed --save # RSS 安装---------- yun&#x2F;_config.yml 设置如下 (但我没有修改) ----------social:  - name: RSS    link: &#x2F;atom.xml # config.feed.path    icon: icon-rss-line    color: orangenpm uninstall hexo-generator-index --save         # 文章置顶： 文章头部添加 top: true 即可npm install hexo-generator-index-pin-top --savenpm install hexo-abbrlink --save                   # 文章短链接---------- 💘 需要新增 💘 hexo&#x2F;_config.yml 设置如下 ----------URLIf your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: http:&#x2F;&#x2F;yoursite.comroot: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;  # 旧的注释掉permalink_defaults:                   # 旧的注释掉permalink: posts&#x2F;:abbrlink&#x2F;abbrlink:  alg: crc32 #support crc16(default) and crc32  rep: hex #support dec(default) and hex  drafts: false #(true)Process draft,(false)Do not process draftGenerate categories from directory-treedepth: the max_depth of directory-tree you want to generate, should &gt; 0  auto_category:    enable: false #默认为 true， 手改改为 false    depth:</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zengchen233.cn/posts/7d014710/">在阿里云服务器上部署Hexo博客 </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄冈师范学院 4.14 蓝桥杯赛前校内模拟赛（二）</title>
      <link href="/posts/f93ac901/"/>
      <url>/posts/f93ac901/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong>昨天学校举办了第十二届蓝桥杯校内模拟赛，本人有幸拿到了第十一名（<strong>接上篇文章！</strong>）</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p><strong>题目描述</strong></p><p>小明对数位中含有 2、0、1、9 的数字很感兴趣（不包括前导 0），在 1 到 40 中这样的数包括 1、2、9、10 至 32、39 和 40，共 28 个，他们的和是 574。 请问，在 1 到 n 中，所有这样的数的和是多少？</p><p><strong>输入格式</strong></p><p>输入一行包含一个整数 n。</p><p><strong>输出格式</strong></p><p>输出一行，包含一个整数，表示满足条件的数的和。 测试数据：</p><p>输入：40      输出：574</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> a <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">search</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>题目描述</strong></p><p>平面上有条直线，其中第条直线是。请计算这些直线将平面分成了几个部分。</p><p><strong>输入格式</strong></p><p>第一行包含一个整数。 以下N行，每行包含两个整数。</p><p><strong>输出格式</strong></p><p>一个整数代表答案。 样例输入&#x2F;输出：</p><p>3                                  6<br>1 1<br>2 2<br>3 3</p><p>这个题目我的水平做不出来呀🤦‍♀️</p><p><strong>第八题：</strong></p><p><strong>题目描述</strong></p><p>给定三个整数数组</p><pre class="language-none"><code class="language-none">A &#x3D; [A1, A2, ... AN],B &#x3D; [B1, B2, ... BN],C &#x3D; [C1, C2, ... CN]，</code></pre><p>请你统计有多少个三元组(i, j, k) 满足：</p><pre class="language-none"><code class="language-none">1 &lt;&#x3D; i, j, k &lt;&#x3D; NAi &lt; Bj &lt; Ck</code></pre><p><strong>输入格式</strong></p><p>第一行包含一个整数N。 第二行包含N个整数A1, A2, … AN。 第三行包含N个整数B1, B2, … BN。 第四行包含N个整数C1, C2, … CN。</p><p><strong>输出格式</strong></p><p>一个整数表示答案</p><p>样例</p><p><strong>样例输入</strong></p><pre class="language-none"><code class="language-none">31 1 12 2 23 3 3</code></pre><p><strong>样例输出</strong></p><pre class="language-none"><code class="language-none">27</code></pre><p>数据范围与提示</p><p>对于30%的数据，1 &lt;&#x3D; N &lt;&#x3D; 100 对于60%的数据，1 &lt;&#x3D; N &lt;&#x3D; 1000 对于100%的数据，1 &lt;&#x3D; N &lt;&#x3D; 100000 0 &lt;&#x3D; Ai, Bi, Ci &lt;&#x3D; 100000</p><p>这个题目在之前的蓝桥杯训练中做到过，我去复习一下再放上来我的代码！</p><p>[checkbox checked&#x3D;”true&#x2F;false”]下次更新来更新代码[&#x2F;checkbox]</p><p> <strong>第九题</strong></p><p><strong>题目描述</strong></p><p>四平方和定理，又称为拉格朗日定理：每个正整数都可以表示为至多4个正整数的平方和。如果把0包括进去，就正好可以表示为4个数的平方和。 对于一个给定的正整数，可能存在多种平方和的表示法。要求你对4个数排序：0 &lt;&#x3D; a &lt;&#x3D; b &lt;&#x3D; c &lt;&#x3D; d。并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法</p><p><strong>输入格式</strong></p><p>一个正整数N (N&lt;5000000)</p><p>输出格式</p><p>4个非负整数，按从小到大排序，中间用空格分开</p><p>样例</p><p><strong>样例输入 1</strong></p><pre class="language-none"><code class="language-none">5</code></pre><p><strong>样例输出 1</strong></p><pre class="language-none"><code class="language-none">0 0 1 2</code></pre><p><strong>样例输入 2</strong></p><pre class="language-none"><code class="language-none">12</code></pre><p><strong>样例输出 2</strong></p><pre class="language-none"><code class="language-none">0 2 2 2</code></pre><p><strong>样例输入 3</strong></p><pre class="language-none"><code class="language-none">773535</code></pre><p><strong>样例输出 3</strong></p><pre class="language-none"><code class="language-none">1 1 267 838</code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> m <span class="token operator">=</span> k<span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> i <span class="token operator">*</span> i <span class="token operator">+</span> j <span class="token operator">*</span> j <span class="token operator">+</span> k <span class="token operator">*</span> k <span class="token operator">+</span> m <span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        a <span class="token operator">=</span> i<span class="token punctuation">;</span>                        b <span class="token operator">=</span> j<span class="token punctuation">;</span>                        c <span class="token operator">=</span> k<span class="token punctuation">;</span>                        d <span class="token operator">=</span> m<span class="token punctuation">;</span>                        cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>第十题：</strong></p><p><strong>题目描述</strong></p><p>肖飞老师在编程之余，酷爱哲学。树林有助于肖老师对哲学的思考，但它们像迷宫一样密密麻麻地栽种着。肖老师的步道是在一条有许多树林的方形区域的小路，由于肖老师思考得极其投入，以致于在树林中散步时经常迷失了方向。 但幸运的是，虽然肖老师每次前往的树林不一样，但树林的步道结构都是相似的：按同样的规则在的正方形土地上设计和构建。设计路径的规则是：当时，每走一米后右转90°，当时，行走路线由前一种行走路线的不同形式组成。下图显示了肖老师的三次行走路线，分别是的情况。对于的情况，肖老师的行走路线由四个结构组成，左下和右下的结构分别是上一个行走路线顺时针和逆时针旋转90°得到，左上和右上的结构则与上一个行走路线相同，然后将这四个结构连接起来，就构成了肖老师的行走路线。这种行走的规则是由数学哲学家David Hilbert设计的，由此产生的路径通常被称为希尔伯特曲线。他曾经讲过一种空间填充方法，用这种曲线来填充满一个平面正方形，肖老师的行走路线都是按照这种方法设计的。   由于树林所处的环境因素，计算机学院的ACM团队将使用热气球营救在树林里迷路的肖老师。肖老师每次在树林里思考问题时，都会记下自己走了多少步，ACM团队也知道肖老师所在树林的边长。因为位置偏僻，定位系统无法使用，所以ACM团队必须确定肖老师所在的位置，即坐标。假设肖老师的步道位于平面直角坐标系，左下角块的坐标为。肖老师的入口总是在，出口总是在，为正方形的边长。同时，假设肖老师在入口处已经走了一米的道路，他只会向前走，不会后退。例如，在b图中，肖老师走了10步，因此他的坐标为 你的任务是写一个程序来帮助ACM团队，根据肖老师走了几米的路和他所在的树林的边长，使用你写的程序来报告肖老师目前所在的目标。快点！肖飞老师急需你的帮助。</p><p><strong>输入格式</strong></p><p>仅一行，输入两个整数和，并用空格分隔。表示肖老师所在树林的边长，表示肖老师所走的距离是多少米。数据范围分别是是，，。</p><p><strong>输出格式</strong></p><p>仅一行，输出肖老师所在的坐标和，以空格分隔。</p><p>样例</p><p><strong>样例输入 1</strong></p><pre class="language-none"><code class="language-none">4 13</code></pre><p><strong>样例输出 1</strong></p><pre class="language-none"><code class="language-none">4 2</code></pre><p><strong>样例输入 2</strong></p><pre class="language-none"><code class="language-none">8 19</code></pre><p><strong>样例输出 2</strong></p><pre class="language-none"><code class="language-none">2 6</code></pre><p>这个题做不出来！😢</p><p>好啦，本次更新就到这里啦！ </p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄冈师范学院-4-14-蓝桥杯赛前校内模拟赛（一）</title>
      <link href="/posts/5915bcab/"/>
      <url>/posts/5915bcab/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong>昨天学校举办了第十二届蓝桥杯校内模拟赛，本人有幸拿到了第十一名：</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p><img src="http://cdn.zengchen233.cn/img/202112201855608.png" loading="lazy"></p><p> 顺便推广一下我们学校的oj：<a href="https://acm.eas1.cn/">https://acm.eas1.cn/</a> 然后放一下我的代码吧： </p><p><strong>第一题题目：</strong></p><p><strong>题目描述</strong></p><p>对于16进制，我们使用字母A-F来表示10及以上的数字。如法炮制，一直用到字母Z，就可以表示36进制。36进制中，A表示10，Z表示35，AA表示370。你能算出 MANY 表示的数字用10进制表示是多少吗?</p><p><strong>输出格式</strong></p><p>直接打印答案即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        string a<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'B'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'C'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'E'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'F'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'G'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'H'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'I'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'J'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'K'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'L'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'M'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'N'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'O'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'P'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'Q'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'R'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'S'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'T'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'U'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'V'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'W'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'X'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'Y'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token char">'Z'</span><span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">default</span><span class="token operator">:</span> b <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                sum <span class="token operator">=</span> sum <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> sum <span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>题目描述</strong></p><p>给定数列 1, 1, 1, 3, 5, 9, 17, …，从第 4 项开始，每项都是前 3 项的和。求第 20190324 项的最后 4 位数字。</p><p><strong>输出格式</strong></p><p>直接打印答案即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">1000000</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20190324</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">%</span> N<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>题目描述</strong></p><p>观察下面的加法算式：图片真找不到了 大家可以在网上找一下图片！</p><p>其中，相同的汉字代表相同的数字，不同的汉字代表不同的数字。请你输出“三羊献瑞”所代表的4位数字（答案唯一），不要输出任何多余内容。</p><p><strong>输出格式</strong></p><p>直接打印答案即可。</p><p>这个题是暴力枚举，等下次有空了在放上来！</p><p>第四题：</p><p><strong>题目描述</strong></p><p>小明用字母 A 对应数字 1，B 对应 2，以此类推，用 Z 对应 26。对于 27 以上的数字，小明用两位或更长位的字符串来对应，例如 AA 对应 27，AB 对 应 28，AZ 对应 52，LQ 对应 329。 请问 2019 对应的字符串是什么？</p><p><strong>输出格式</strong></p><p>直接打印答案即可。</p><p>这个题目直接用<strong>excel</strong>拉就完啦！</p><p>第五题：</p><p>题目描述</p><p>下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可 以通行的地方。</p><pre class="language-none"><code class="language-none">010000000100001001110000</code></pre><p>迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。 对于上面的迷宫，从入口开始，可以按DRRURRDDDR 的顺序通过迷宫，一共 10 步。其中 D、U、L、R 分别表示向下、向上、向左、向右走。 对于下面这个更复杂的迷宫（30 行 50 列），请找出一种通过迷宫的方式， 其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。</p><pre class="language-none"><code class="language-nonecode></pre><p><strong>输出格式</strong></p><p>直接打印答案即可。</p><p>这个题真的不太会！</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号上线啦！</title>
      <link href="/posts/b492f9b0/"/>
      <url>/posts/b492f9b0/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 自己开始营业自己的公众号啦！</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><p>失踪人口再次回归！这次回归带来了船新的版本，我和思思的微信公众号上线啦！放上二维码：</p><p><img src="http://cdn.zengchen233.cn/img/202112201853854.jpeg" loading="lazy"></p><p> 嘿嘿，欢迎大家点点关注！一般的发布都会在公众号发布！感谢大家！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在阿里云服务器上部署Hexo博客</title>
      <link href="/posts/7d014710/"/>
      <url>/posts/7d014710/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 在阿里云服务器 <code>Ubuntu 20.04</code> 上部署 <code>Hexo</code> 博客。</p><span id="more"></span><blockquote><p>本文初发于 <strong>“曾晨de小站”</strong>  <a href="https://zengchen233.cn/">zengchen233.cn</a>，同步转载于此。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>起初是使用的<code>wordpress</code>，阿里云学生机支撑不起来小站，故更换<code>Hexo</code>，用上我心爱的小服务器。</p><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h3><p> 阿里云购买 <strong>“云服务器Esc”</strong> ，安装 <code>Ubuntu 20.04</code>；面板左侧点击 <strong>“服务器运维-远程连接”</strong> ，设置 root 密码后重启电脑生效，在本机使用 <code>ssh root@20.01.10.24</code> 登录 （此假设我购买的阿里云服务器公网<code>IP</code> 为 <code>20.01.10.24</code>）。</p><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><p>创建新用户 <code>zengchen</code></p><pre class="language-sh" data-language="sh"><code class="language-sh">adduser zengchenchmod 740 &#x2F;etc&#x2F;sudoersvim &#x2F;etc&#x2F;sudoers</code></pre><p>找到如下 <code>root ALL=(ALL:ALL) ALL</code> 后，在其下面添加一行</p><pre class="language-shell" data-language="shell"><code class="language-shell">zengchen   ALL&#x3D;(ALL:ALL) ALL  # zengchen 替换为自己用户名</code></pre><p>获取 <code>root</code> 权限</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo passwd zengchen</code></pre><h3 id="切换新用户"><a href="#切换新用户" class="headerlink" title="切换新用户"></a>切换新用户</h3><p>切换为新建的用户后（<strong>后面都是此用户和其 <code>~</code> 目录下工作</strong> ），安装一些常用软件</p><pre class="language-shell" data-language="shell"><code class="language-shell">su zengchencd ~sudo apt updatesudo apt install vim git htop screenfetch curl wget </code></pre><h3 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 <code>SSH</code></h3><p>创建 <code>~/.ssh</code> 和 <code>authorized_keys</code> 文件，赋予权限</p><pre class="language-shell" data-language="shell"><code class="language-shell">mkdir ~&#x2F;.sshvim ~&#x2F;.ssh&#x2F;authorized_keys  # authorized_keys 名字不能变chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys chmod 700 ~&#x2F;.ssh&#x2F;</code></pre><p>然后切回本机，将 <code>cat ~/.ssh/id_rsa.pub</code> 的结果复制到 远程服务器的<code>~/.ssh/authorized_keys</code>里面；在本地测试，验证 <code>ssh</code> 无密码登录</p><pre class="language-shell" data-language="shell"><code class="language-shell">ssh zengchen@20.01.10.24</code></pre><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 <code>Git</code></h3><p>创建 <code>Git</code> 裸库 <code>hexo.git</code>，和工作目录 <code>Hexo</code>（存放解析后 <code>html</code> 文件）</p><pre class="language-shell" data-language="shell"><code class="language-shell">cd ~mkdir hexogit init --bare hexo.gitvim hexo.git&#x2F;hooks&#x2F;post-receive  # 创建新文件</code></pre><p>里面 <code>post-receive</code> 添加 <code>hook</code> 钩子，</p><pre class="language-shell" data-language="shell"><code class="language-shell">#！&#x2F;bin&#x2F;shgit --work-tree&#x3D;&#x2F;home&#x2F;zengchen&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;zengchen&#x2F;hexo.git checkout -f</code></pre><p>添加运行权限</p><pre class="language-none"><code class="language-none">chmod +x hexo.git&#x2F;hooks&#x2F;post-receive</code></pre><p>若执行 <code>git clone zengchen@20.01.10.24:/home/zengchen/hexo.git</code> 可下载云服务器该 git 仓库</p><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 <code>nginx</code></h3><p>安装 <code>nginx</code> 和修改对应配置文件</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt installsudo vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</code></pre><p>找到</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># include snippets/snakeoil.conf;</span>root /var/www/html<span class="token punctuation">;</span> </code></pre><p>替换为</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># include snippets/snakeoil.conf;</span>root /home/zengchen/hexo<span class="token punctuation">;</span></code></pre><p>执行 <code>service nginx status</code> 查看 nginx 状态，其默认状态是运行中（服务开始了） + 开机自启 （<strong>若是没有，需要执行此状态</strong> ）；命令可参考 <a href="https://juejin.cn/post/6844904000769245191">【译】你必需知道的10个 Nginx 常用命令</a> 。</p><p>若此刻直接访问云服务器的公网 IP 会显示 nginx 欢迎界面，因为此时 <code>/home/zengchen/blog</code> 文件夹为空，没有任何 html 文件。</p><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置:"></a>本地配置:</h2><h3 id="创建-hexo-文件夹"><a href="#创建-hexo-文件夹" class="headerlink" title="创建 hexo 文件夹"></a>创建 <code>hexo</code> 文件夹</h3><p>本地创建一个测试的 <code>Hexo</code> 的博客文件夹，用来最小化验证部署正确。</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> ~hexo init Hexo                       <span class="token comment"># 创建和初始化 Hexo 文件夹</span>cnpm <span class="token function">install</span>                             <span class="token comment"># 安装插件</span>cnpm <span class="token function">install</span> hexo-deployer-git --save    <span class="token comment"># hexo d 部署插件</span></code></pre><p>修改 <code>Hexo</code> 根目录下的配置文件 <code>_config.yml</code> ，末尾修改为</p><pre class="language-none"><code class="language-none"># Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy:  type: git  repo: zengchen@20.01.10.24:&#x2F;home&#x2F;zengchen&#x2F;hexo.git  branch: master                             message: &#39;站点更新:&#123;&#123;now(&quot;YYYY-MM-DD HH:mm:ss&quot;)&#125;&#125;&#39;</code></pre><h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><p>在本机中 <code>~/hexoBlog</code> 路径下，执行部署</p><pre class="language-shell" data-language="shell"><code class="language-shell">hexo clean   <span class="token comment"># 清理</span>hexo g       <span class="token comment"># 生成 html 文件</span>hexo s       <span class="token comment"># 在本机浏览器预览效果</span>hexo d       <span class="token comment"># 部署，会自动将生成的 html 文件， push 到阿里云服务器的 /home/zengchen/Hexo 文件夹中</span></code></pre><p>然后<strong>重启阿里云服务器后，浏览器输入服务器公网 <code>IP</code></strong> ，即可网页看到解析后的部署网页 “Hello World”。</p><p>最后替换为自己的真实博客文件夹的 <code>_config.yml</code> 文件末尾处替换为如上，重新执行 <code>hexo d</code> 部署即可成功；可以生成一个快照哦~，以防万一。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
